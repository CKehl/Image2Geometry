cmake_minimum_required(VERSION 2.8)
project(Image2Geometry)

set(CMAKE_CXX_FLAGS "-Wall")
set(CMAKE_CXX_FLAGS_DEBUG "-g -DDEBUG")
set(CMAKE_CXX_FLAGS_MINSIZEREL "-Os")
set(CMAKE_CXX_FLAGS_RELEASE "-O3")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -g -DDEBUG")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS}")
set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} -DDEBUG")
set(CMAKE_EXE_LINKER_FLAGS_MINSIZEREL "${CMAKE_EXE_LINKER_FLAGS_MINSIZEREL}")
set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE}")
set(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO} -DDEBUG")
#set(CMAKE_INSTALL_PREFIX "/usr/local/lib/CGEL")
set(CMAKE_C_COMPILER ${CMAKE_CXX_COMPILER})
include(CMakeBackwardCompatibilityC)
set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules ${CMAKE_MODULE_PATH})

set(ADDITIONAL_HEADERS "")
set(ADDITIONAL_SOURCES "")
set(CUDA_SOURCES "")
set(SOURCE_FOLDER src)
set(ADDITIONAL_LIBRARY_PATHS "")
set(ADDITIONAL_LINKER_FLAGS "")
set(ADDITIONAL_CXX_FLAGS "-fpermissive -std=c++0x")
set(LIBRARIES "")
#osg osgDB ${CGAL_LIBRARIES} gmp core++ mpfr ${VTK_LIBRARIES} ${Boost_LIBRARIES}
set(INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/${SOURCE_FOLDER}" )
#

find_package(CUDA)
if(CUDA_FOUND)
  message("CUDA FOUND.")
  option(CUDA_USE_CUDA_BUILD "Determine to use CUDA code (good for global link) or  not (for local build and wrapping)" ON)
  list(APPEND ADDITIONAL_LIBRARY_PATHS ${CUDA_TOOLKIT_ROOT_DIR})
  list(APPEND ADDITIONAL_LIBRARY_PATHS ${CUDA_SDK_ROOT_DIR})
  list(APPEND INCLUDE_DIRS ${CUDA_SDK_ROOT_DIR}/common/inc)
  list(APPEND LIBRARIES ${CUDA_LIBRARIES})
  list(APPEND INCLUDE_DIRS ${CUDA_INCLUDE_DIRS})
  list(APPEND INCLUDE_DIRS ${CUDA_TOOLKIT_INCLUDE})
  #list(APPEND INCLUDE_DIRS ${CUDA_SDK_ROOT_DIR}/common/inc)
  #set(BUILD_SHARED_LIBS OFF)
  #set(BUILD_SHARED_LIBS ON)
  #option(CUDA_SEPARABLE_COMPILATION "Seperable Compilation" ON)
  if(CUDA_USE_CUDA_BUILD MATCHES ON)
    set(ADDITIONAL_CXX_FLAGS "${ADDITIONAL_CXX_FLAGS} -DCOMPILE_WITH_CUDA")
  endif(CUDA_USE_CUDA_BUILD MATCHES ON)
  #list(APPEND CUDA_SOURCES ${SOURCE_FOLDER}/CUDAEnv.cpp)
  #list(APPEND CUDA_SOURCES ${SOURCE_FOLDER}/kernels.cu)
  set(CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE ON)
  set(CUDA_VERBOSE_BUILD ON)
  set(CUDA_PROPAGATE_HOST_FLAGS OFF)
endif(CUDA_FOUND)

find_package(OSG_)
find_package(OpenThreads)
if(OSG_FOUND)
  list(APPEND ADDITIONAL_LIBRARY_PATHS $ENV{OSG_LIB})
  set(OSG_LIBRARIES "")
  list(APPEND OSG_LIBRARIES osg)
  list(APPEND OSG_LIBRARIES osgUtil)
  list(APPEND OSG_LIBRARIES osgDB)
  list(APPEND OSG_LIBRARIES osgText)
  list(APPEND OSG_LIBRARIES osgTerrain)
  list(APPEND OSG_LIBRARIES osgFX)
  list(APPEND OSG_LIBRARIES osgViewer)
  list(APPEND OSG_LIBRARIES osgGA)
  list(APPEND OSG_LIBRARIES osgSim)
  list(APPEND OSG_LIBRARIES osgShadow)
  list(APPEND OSG_LIBRARIES osgManipulator)
  list(APPEND OSG_LIBRARIES osgParticle)
  list(APPEND OSG_LIBRARIES osgAnimation)
  list(APPEND OSG_LIBRARIES OpenThreads)

  list(APPEND LIBRARIES osg)
  list(APPEND LIBRARIES osgUtil)
  list(APPEND LIBRARIES osgDB)
  list(APPEND LIBRARIES osgText)
  list(APPEND LIBRARIES osgTerrain)
  list(APPEND LIBRARIES osgFX)
  list(APPEND LIBRARIES osgViewer)
  list(APPEND LIBRARIES osgGA)
  list(APPEND LIBRARIES osgSim)
  list(APPEND LIBRARIES osgShadow)
  list(APPEND LIBRARIES osgManipulator)
  list(APPEND LIBRARIES osgParticle)
  list(APPEND LIBRARIES osgAnimation)
  list(APPEND LIBRARIES OpenThreads)
  #set(LIBRARIES "${LIBRARIES} osg osgUtil osgDB osgText osgTerrain osgFX osgViewer osgGA osgSim osgShadow osgManipulator osgParticle osgAnimation")
  list(APPEND INCLUDE_DIRS ${OSG_INCLUDE_DIR})
  list(APPEND INCLUDE_DIRS ${OSG_GEN_INCLUDE_DIR})
  #set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DCOMPILE_WITH_OSG")
  set(ADDITIONAL_CXX_FLAGS "${ADDITIONAL_CXX_FLAGS} -DCOMPILE_WITH_OSG")

  # Add include directories needed to use OSG.
  INCLUDE_DIRECTORIES(${OSG_INCLUDE_DIR} ${OSG_GEN_INCLUDE_DIR})
  # Add link directories needed to use OSG.
  LINK_DIRECTORIES($ENV{OSG_LIB})
  LINK_LIBRARIES(${OSG_LIBRARIES})

  message(${CMAKE_CXX_FLAGS})
endif(OSG_FOUND)

# OpenCV_FOUND - True if OpenCV was found
# OpenCV_INCLUDE_DIR - Directory containing the OpenCV include files
# OpenCV_LIBRARIES - Libraries within OpenCV
# OpenCV_LINK_DIRECTORIES - Directory holding the libraries
find_package(OpenCV)
if(OpenCV_FOUND)
  message("Using OpenCV interface.")
  list(APPEND ADDITIONAL_LIBRARY_PATHS ${OpenCV_LINK_DIRECTORIES})
  #set(OpenCV_COMPONENTS "")
  #list(APPEND OpenCV_COMPONENTS opencv_calib3d)
  #list(APPEND OpenCV_COMPONENTS opencv_contrib)
  #list(APPEND OpenCV_COMPONENTS opencv_core)
  #list(APPEND OpenCV_COMPONENTS opencv_features2d)
  #list(APPEND OpenCV_COMPONENTS opencv_flann)
  #list(APPEND OpenCV_COMPONENTS opencv_gpu)
  #list(APPEND OpenCV_COMPONENTS opencv_highgui)
  #list(APPEND OpenCV_COMPONENTS opencv_imgproc)
  #list(APPEND OpenCV_COMPONENTS opencv_legacy)
  #list(APPEND OpenCV_COMPONENTS opencv_ml)
  #list(APPEND OpenCV_COMPONENTS opencv_nonfree)
  #list(APPEND OpenCV_COMPONENTS opencv_objdetect)
  #list(APPEND OpenCV_COMPONENTS opencv_ocl)
  #list(APPEND OpenCV_COMPONENTS opencv_photo)
  #list(APPEND OpenCV_COMPONENTS opencv_stitching)
  #list(APPEND OpenCV_COMPONENTS opencv_superres)
  #list(APPEND OpenCV_COMPONENTS opencv_video)
  #list(APPEND OpenCV_COMPONENTS opencv_videostab)
  #list(APPEND LIBRARIES ${OpenCV_COMPONENTS})
  list(APPEND LIBRARIES ${OpenCV_LIBS})
  list(APPEND INCLUDE_DIRS ${OpenCV_INCLUDE_DIRS})

  message( STATUS "OpenCV include dir: ${OpenCV_INCLUDE_DIRS}")
  INCLUDE_DIRECTORIES(${OpenCV_INCLUDE_DIRS})
  message( STATUS "OpenCV library dir: ${OpenCV_INSTALL_PATH}")
  LINK_DIRECTORIES(${OpenCV_INSTALL_PATH})
  message( STATUS "OpenCV libraries: ${OpenCV_LIBS}")
  LINK_LIBRARIES(${OpenCV_LIBS})
endif(OpenCV_FOUND)

# FLANN_FOUND - True if FLANN was found.
# FLANN_INCLUDE_DIRS - Directories containing the FLANN include files.
# FLANN_LIBRARIES - Libraries needed to use FLANN.
# FLANN_DEFINITIONS - Compiler flags for FLANN.
find_package(FLANN_)
if(FLANN_FOUND)
  message("Using FLANN interface.")
  option(FLANN_USE_FLANN_LIB "Determine to use FLANN code (good for global link) or  not (for local build and wrapping)" ON)
  list(APPEND ADDITIONAL_LIBRARY_PATHS ${PC_FLANN_LIBRARY_DIRS})
  list(APPEND LIBRARIES flann)
  list(APPEND INCLUDE_DIRS ${FLANN_INCLUDE_DIRS})
  if(FLANN_USE_FLANN_LIB MATCHES ON)
    set(ADDITIONAL_CXX_FLAGS "${ADDITIONAL_CXX_FLAGS} -DCOMPILE_WITH_FLANN ${FLANN_DEFINITIONS}")
    add_definitions("-DCOMPILE_WITH_FLANN ${FLANN_DEFINITIONS}")
  endif(FLANN_USE_FLANN_LIB MATCHES ON)

  INCLUDE_DIRECTORIES(${FLANN_INCLUDE_DIRS})
  LINK_DIRECTORIES(${PC_FLANN_LIBRARY_DIRS})
  LINK_LIBRARIES(flann)
endif(FLANN_FOUND)

#  TIFF_INCLUDE_DIR, where to find tiff.h, etc.
#  TIFF_LIBRARIES, libraries to link against to use TIFF.
#  TIFF_FOUND, If false, do not try to use TIFF.
find_package(TIFF)
if(TIFF_FOUND)
  list(APPEND ADDITIONAL_LIBRARY_PATHS ${TIFF_LIBRARY_DIR})
  #list(APPEND LIBRARIES ${TIFF_LIBRARIES})
  list(APPEND LIBRARIES ${TIFF_LIBRARY_NAME})
  list(APPEND INCLUDE_DIRS ${TIFF_INCLUDE_DIR})
  message("Use libTIFF.")
  message(${CMAKE_CXX_FLAGS})
  #message(${TIFF_LIBRARY_DIR})
  #message(${TIFF_LIBRARY_NAME})
  LINK_LIBRARIES(${TIFF_LIBRARY_NAME})
endif(TIFF_FOUND)

#  JPEG_INCLUDE_DIR, where to find tiff.h, etc.
#  JPEG_LIBRARIES, libraries to link against to use TIFF.
#  JPEG_FOUND, If false, do not try to use TIFF.
find_package(JPEG)
if(TIFF_FOUND)
  list(APPEND ADDITIONAL_LIBRARY_PATHS ${TIFF_LIBRARY_DIR})
  #list(APPEND LIBRARIES ${TIFF_LIBRARIES})
  list(APPEND LIBRARIES ${TIFF_LIBRARY_NAME})
  list(APPEND INCLUDE_DIRS ${TIFF_INCLUDE_DIR})
  message("Use libTIFF.")
  message(${CMAKE_CXX_FLAGS})
  #message(${TIFF_LIBRARY_DIR})
  #message(${TIFF_LIBRARY_NAME})
  LINK_LIBRARIES(${TIFF_LIBRARY_NAME})
endif(TIFF_FOUND)

find_package(Boost REQUIRED)
if(Boost_FOUND)
  #set(LIBRARIES "${LIBRARIES} ${Boost_LIBRARIES}")
  list(APPEND ADDITIONAL_LIBRARY_PATHS ${BOOST_LIBRARYDIR})
  list(APPEND LIBRARIES ${Boost_LIBRARIES})
  set(Boost_SUBSYSTEM "")
  list(APPEND Boost_SUBSYSTEM boost_system)
  list(APPEND Boost_SUBSYSTEM boost_program_options)
  list(APPEND Boost_SUBSYSTEM boost_filesystem)
  list(APPEND Boost_SUBSYSTEM boost_regex)
  list(APPEND Boost_SUBSYSTEM boost_thread)
  #set(INCLUDE_DIRS "${INCLUDE_DIRS} ${Boost_INCLUDE_DIR}")
  list(APPEND INCLUDE_DIRS ${Boost_INCLUDE_DIR})
  message(${CMAKE_CXX_FLAGS})
  link_directories(${BOOST_LIBRARYDIR})
  link_libraries(${Boost_LIBRARIES} ${Boost_SUBSYSTEM})
endif(Boost_FOUND)

FIND_PACKAGE( OpenMP REQUIRED)
if(OPENMP_FOUND)
  message("OPENMP FOUND")
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
  #set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
  #set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
  set (ADDITIONAL_CXX_FLAGS "${ADDITIONAL_CXX_FLAGS} ${OpenMP_EXE_LINKER_FLAGS} -fopenmp")
  set (ADDITIONAL_LINKER_FLAGS "${ADDITIONAL_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS} -fopenmp")
  message(${CMAKE_CXX_FLAGS})
endif(OPENMP_FOUND)

list(REMOVE_DUPLICATES ADDITIONAL_LIBRARY_PATHS)
list(REMOVE_DUPLICATES INCLUDE_DIRS)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${ADDITIONAL_CXX_FLAGS}")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${ADDITIONAL_CXX_FLAGS}")
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${ADDITIONAL_LINKER_FLAGS}")
set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} ${ADDITIONAL_CXX_FLAGS}")
#message(${CMAKE_CXX_FLAGS})
#message(${INCLUDE_DIRS})

OPTION(BUILD_SHARED_LIBS "Build shared libraries." ON)
SET(CMAKE_INCLUDE_PATH ${CMAKE_INCLUDE_PATH} CACHE STRING "You may add additional search paths here. Use ; to separate multiple paths.")
SET(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} CACHE STRING "You may add additional search paths here. Use ; to separate multiple paths.")
SET(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} CACHE STRING "(EXPERIMENTAL) You may add additional search paths here. Use ; to separate multiple paths.")
SET(CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX} CACHE STRING "Final Installation Path.")
#set(LIBRARY_OUTPUT_PATH ${CMAKE_PREFIX_PATH}/lib)
#set(EXECUTABLE_OUTPUT_PATH ${CMAKE_PREFIX_PATH}/bin)
#set(INCLUDE_OUTPUT_PATH ${CMAKE_PREFIX_PATH}/include/${LIB_NAME} CACHE STRING "Installation include directory")
#mark_as_advanced(LIBRARY_OUTPUT_PATH EXECUTABLE_OUTPUT_PATH)

set(M_LIBRARY)
if(UNIX)
	set(M_LIBRARY m)
endif(UNIX)

set(LIBS_WO_M "${LIBRARIES}")
LIST(APPEND LIBRARIES ${M_LIBRARY})

ADD_SUBDIRECTORY(src)
