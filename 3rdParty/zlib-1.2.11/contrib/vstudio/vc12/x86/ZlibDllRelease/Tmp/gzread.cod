; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	D:\git\Image2Geometry\3rdParty\zlib-1.2.11\gzread.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BH@CFIIDOJD@unexpected?5end?5of?5file?$AA@ ; `string'
PUBLIC	??_C@_0CH@CPOLIEKA@internal?5error?3?5inflate?5stream?5c@ ; `string'
PUBLIC	??_C@_0BG@HCKBMIHF@compressed?5data?5error?$AA@	; `string'
PUBLIC	??_C@_0BP@HLDABFKK@request?5does?5not?5fit?5in?5an?5int?$AA@ ; `string'
PUBLIC	??_C@_0CB@EGGJDMIK@request?5does?5not?5fit?5in?5a?5size_t@ ; `string'
PUBLIC	??_C@_0BP@IIKIGMCC@out?5of?5room?5to?5push?5characters?$AA@ ; `string'
EXTRN	__close:PROC
EXTRN	__read:PROC
EXTRN	__errno:PROC
EXTRN	_memchr:PROC
EXTRN	_strerror:PROC
;	COMDAT ??_C@_0BP@IIKIGMCC@out?5of?5room?5to?5push?5characters?$AA@
CONST	SEGMENT
??_C@_0BP@IIKIGMCC@out?5of?5room?5to?5push?5characters?$AA@ DB 'out of ro'
	DB	'om to push characters', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@EGGJDMIK@request?5does?5not?5fit?5in?5a?5size_t@
CONST	SEGMENT
??_C@_0CB@EGGJDMIK@request?5does?5not?5fit?5in?5a?5size_t@ DB 'request do'
	DB	'es not fit in a size_t', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HLDABFKK@request?5does?5not?5fit?5in?5an?5int?$AA@
CONST	SEGMENT
??_C@_0BP@HLDABFKK@request?5does?5not?5fit?5in?5an?5int?$AA@ DB 'request '
	DB	'does not fit in an int', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HCKBMIHF@compressed?5data?5error?$AA@
CONST	SEGMENT
??_C@_0BG@HCKBMIHF@compressed?5data?5error?$AA@ DB 'compressed data error'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@CPOLIEKA@internal?5error?3?5inflate?5stream?5c@
CONST	SEGMENT
??_C@_0CH@CPOLIEKA@internal?5error?3?5inflate?5stream?5c@ DB 'internal er'
	DB	'ror: inflate stream corrupt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CFIIDOJD@unexpected?5end?5of?5file?$AA@
CONST	SEGMENT
??_C@_0BH@CFIIDOJD@unexpected?5end?5of?5file?$AA@ DB 'unexpected end of f'
	DB	'ile', 00H					; `string'
PUBLIC	_gzdirect@4
PUBLIC	_gzgets@12
PUBLIC	_gzungetc@8
PUBLIC	_gzgetc_@4
PUBLIC	_gzgetc@4
PUBLIC	_gzfread@16
PUBLIC	_gzread@12
PUBLIC	_gzclose_r@4
; Function compile flags: /Ogtp
; File d:\git\image2geometry\3rdparty\zlib-1.2.11\gzread.c
;	COMDAT _gzclose_r@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzclose_r@4 PROC					; COMDAT

; 629  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 630  :     int ret, err;
; 631  :     gz_statep state;
; 632  : 
; 633  :     /* get internal structure */
; 634  :     if (file == NULL)

  00004	8b 5d 08	 mov	 ebx, DWORD PTR _file$[ebp]
  00007	85 db		 test	 ebx, ebx
  00009	75 0a		 jne	 SHORT $LN3@gzclose_r
$LN6@gzclose_r:

; 635  :         return Z_STREAM_ERROR;

  0000b	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00010	5b		 pop	 ebx

; 654  : }

  00011	5d		 pop	 ebp
  00012	c2 04 00	 ret	 4
$LN3@gzclose_r:

; 636  :     state = (gz_statep)file;
; 637  : 
; 638  :     /* check that we're reading */
; 639  :     if (state->mode != GZ_READ)

  00015	81 7b 10 4f 1c
	00 00		 cmp	 DWORD PTR [ebx+16], 7247 ; 00001c4fH
  0001c	75 ed		 jne	 SHORT $LN6@gzclose_r

; 640  :         return Z_STREAM_ERROR;
; 641  : 
; 642  :     /* free memory and close file */
; 643  :     if (state->size) {

  0001e	83 7b 1c 00	 cmp	 DWORD PTR [ebx+28], 0
  00022	74 1c		 je	 SHORT $LN1@gzclose_r

; 644  :         inflateEnd(&(state->strm));

  00024	8d 43 64	 lea	 eax, DWORD PTR [ebx+100]
  00027	50		 push	 eax
  00028	e8 00 00 00 00	 call	 _inflateEnd@4

; 645  :         free(state->out);

  0002d	ff 73 28	 push	 DWORD PTR [ebx+40]
  00030	e8 00 00 00 00	 call	 _free

; 646  :         free(state->in);

  00035	ff 73 24	 push	 DWORD PTR [ebx+36]
  00038	e8 00 00 00 00	 call	 _free
  0003d	83 c4 08	 add	 esp, 8
$LN1@gzclose_r:

; 647  :     }
; 648  :     err = state->err == Z_BUF_ERROR ? Z_BUF_ERROR : Z_OK;

  00040	56		 push	 esi
  00041	57		 push	 edi
  00042	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  00047	33 ff		 xor	 edi, edi
  00049	39 43 5c	 cmp	 DWORD PTR [ebx+92], eax

; 649  :     gz_error(state, Z_OK, NULL);

  0004c	8b cb		 mov	 ecx, ebx
  0004e	6a 00		 push	 0
  00050	0f 44 f8	 cmove	 edi, eax
  00053	33 d2		 xor	 edx, edx
  00055	e8 00 00 00 00	 call	 _gz_error

; 650  :     free(state->path);

  0005a	ff 73 18	 push	 DWORD PTR [ebx+24]
  0005d	e8 00 00 00 00	 call	 _free

; 651  :     ret = close(state->fd);

  00062	ff 73 14	 push	 DWORD PTR [ebx+20]
  00065	e8 00 00 00 00	 call	 __close

; 652  :     free(state);

  0006a	53		 push	 ebx
  0006b	8b f0		 mov	 esi, eax
  0006d	e8 00 00 00 00	 call	 _free
  00072	83 c4 10	 add	 esp, 16			; 00000010H

; 653  :     return ret ? Z_ERRNO : err;

  00075	83 c8 ff	 or	 eax, -1
  00078	85 f6		 test	 esi, esi
  0007a	0f 45 f8	 cmovne	 edi, eax
  0007d	8b c7		 mov	 eax, edi
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx

; 654  : }

  00082	5d		 pop	 ebp
  00083	c2 04 00	 ret	 4
_gzclose_r@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\git\image2geometry\3rdparty\zlib-1.2.11\gzread.c
;	COMDAT _gz_load
_TEXT	SEGMENT
_buf$1$ = -4						; size = 4
_len$ = 8						; size = 4
tv136 = 12						; size = 4
_have$ = 12						; size = 4
_gz_load PROC						; COMDAT
; _state$ = ecx
; _buf$ = edx

; 26   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi

; 27   :     int ret;
; 28   :     unsigned get, max = ((unsigned)-1 >> 2) + 1;
; 29   : 
; 30   :     *have = 0;

  00006	8b 75 0c	 mov	 esi, DWORD PTR _have$[ebp]
  00009	8b d9		 mov	 ebx, ecx
  0000b	57		 push	 edi
  0000c	8b 7d 08	 mov	 edi, DWORD PTR _len$[ebp]
  0000f	89 55 fc	 mov	 DWORD PTR _buf$1$[ebp], edx
  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	c7 45 0c 00 00
	00 40		 mov	 DWORD PTR tv136[ebp], 1073741824 ; 40000000H
  0001f	90		 npad	 1
$LL7@gz_load:

; 31   :     do {
; 32   :         get = len - *have;

  00020	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00022	8b c7		 mov	 eax, edi
  00024	2b c1		 sub	 eax, ecx

; 33   :         if (get > max)

  00026	3d 00 00 00 40	 cmp	 eax, 1073741824		; 40000000H
  0002b	0f 47 45 0c	 cmova	 eax, DWORD PTR tv136[ebp]

; 34   :             get = max;
; 35   :         ret = read(state->fd, buf + *have, get);

  0002f	50		 push	 eax
  00030	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  00033	50		 push	 eax
  00034	ff 73 14	 push	 DWORD PTR [ebx+20]
  00037	e8 00 00 00 00	 call	 __read
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 36   :         if (ret <= 0)

  0003f	85 c0		 test	 eax, eax
  00041	7e 0b		 jle	 SHORT $LN14@gz_load

; 37   :             break;
; 38   :         *have += (unsigned)ret;

  00043	01 06		 add	 DWORD PTR [esi], eax

; 39   :     } while (*have < len);

  00045	8b 55 fc	 mov	 edx, DWORD PTR _buf$1$[ebp]
  00048	39 3e		 cmp	 DWORD PTR [esi], edi
  0004a	72 d4		 jb	 SHORT $LL7@gz_load

; 40   :     if (ret < 0) {

  0004c	85 c0		 test	 eax, eax
$LN14@gz_load:
  0004e	79 24		 jns	 SHORT $LN2@gz_load

; 41   :         gz_error(state, Z_ERRNO, zstrerror());

  00050	e8 00 00 00 00	 call	 __errno
  00055	ff 30		 push	 DWORD PTR [eax]
  00057	e8 00 00 00 00	 call	 _strerror
  0005c	50		 push	 eax
  0005d	83 ca ff	 or	 edx, -1
  00060	8b cb		 mov	 ecx, ebx
  00062	e8 00 00 00 00	 call	 _gz_error
  00067	83 c4 08	 add	 esp, 8

; 42   :         return -1;

  0006a	83 c8 ff	 or	 eax, -1
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi
  0006f	5b		 pop	 ebx

; 47   : }

  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
$LN2@gz_load:

; 43   :     }
; 44   :     if (ret == 0)

  00074	85 c0		 test	 eax, eax
  00076	75 07		 jne	 SHORT $LN1@gz_load

; 45   :         state->eof = 1;

  00078	c7 43 40 01 00
	00 00		 mov	 DWORD PTR [ebx+64], 1
$LN1@gz_load:
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi

; 46   :     return 0;

  00081	33 c0		 xor	 eax, eax
  00083	5b		 pop	 ebx

; 47   : }

  00084	8b e5		 mov	 esp, ebp
  00086	5d		 pop	 ebp
  00087	c3		 ret	 0
_gz_load ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\git\image2geometry\3rdparty\zlib-1.2.11\gzread.c
;	COMDAT _gz_avail
_TEXT	SEGMENT
_got$ = -4						; size = 4
_gz_avail PROC						; COMDAT
; _state$ = ecx

; 58   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx

; 59   :     unsigned got;
; 60   :     z_streamp strm = &(state->strm);
; 61   : 
; 62   :     if (state->err != Z_OK && state->err != Z_BUF_ERROR)

  00007	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  0000a	85 c0		 test	 eax, eax
  0000c	74 0d		 je	 SHORT $LN7@gz_avail
  0000e	83 f8 fb	 cmp	 eax, -5			; fffffffbH
  00011	74 08		 je	 SHORT $LN7@gz_avail
$LN13@gz_avail:

; 63   :         return -1;

  00013	83 c8 ff	 or	 eax, -1
  00016	5e		 pop	 esi

; 80   : }

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c3		 ret	 0
$LN7@gz_avail:

; 64   :     if (state->eof == 0) {

  0001b	83 7e 40 00	 cmp	 DWORD PTR [esi+64], 0
  0001f	75 4a		 jne	 SHORT $LN6@gz_avail

; 65   :         if (strm->avail_in) {       /* copy what's there to the start */

  00021	57		 push	 edi
  00022	8b 7e 68	 mov	 edi, DWORD PTR [esi+104]
  00025	85 ff		 test	 edi, edi
  00027	74 15		 je	 SHORT $LN2@gz_avail

; 66   :             unsigned char *p = state->in;

  00029	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]

; 67   :             unsigned const char *q = strm->next_in;

  0002c	8b 56 64	 mov	 edx, DWORD PTR [esi+100]
  0002f	90		 npad	 1
$LL4@gz_avail:

; 68   :             unsigned n = strm->avail_in;
; 69   :             do {
; 70   :                 *p++ = *q++;

  00030	8a 02		 mov	 al, BYTE PTR [edx]
  00032	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00035	88 41 ff	 mov	 BYTE PTR [ecx-1], al
  00038	8d 52 01	 lea	 edx, DWORD PTR [edx+1]

; 71   :             } while (--n);

  0003b	4f		 dec	 edi
  0003c	75 f2		 jne	 SHORT $LL4@gz_avail
$LN2@gz_avail:

; 72   :         }
; 73   :         if (gz_load(state, state->in + strm->avail_in,
; 74   :                     state->size - strm->avail_in, &got) == -1)

  0003e	8b 56 24	 mov	 edx, DWORD PTR [esi+36]
  00041	8d 45 fc	 lea	 eax, DWORD PTR _got$[ebp]
  00044	03 56 68	 add	 edx, DWORD PTR [esi+104]
  00047	8b ce		 mov	 ecx, esi
  00049	50		 push	 eax
  0004a	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0004d	2b 46 68	 sub	 eax, DWORD PTR [esi+104]
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 _gz_load
  00056	83 c4 08	 add	 esp, 8
  00059	5f		 pop	 edi
  0005a	83 f8 ff	 cmp	 eax, -1
  0005d	74 b4		 je	 SHORT $LN13@gz_avail

; 75   :             return -1;
; 76   :         strm->avail_in += got;

  0005f	8b 45 fc	 mov	 eax, DWORD PTR _got$[ebp]
  00062	01 46 68	 add	 DWORD PTR [esi+104], eax

; 77   :         strm->next_in = state->in;

  00065	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00068	89 46 64	 mov	 DWORD PTR [esi+100], eax
$LN6@gz_avail:

; 78   :     }
; 79   :     return 0;

  0006b	33 c0		 xor	 eax, eax
  0006d	5e		 pop	 esi

; 80   : }

  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
_gz_avail ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\git\image2geometry\3rdparty\zlib-1.2.11\gzread.c
;	COMDAT _gz_look
_TEXT	SEGMENT
_gz_look PROC						; COMDAT
; _state$ = ecx

; 93   : {

  00000	53		 push	 ebx
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 94   :     z_streamp strm = &(state->strm);
; 95   : 
; 96   :     /* allocate read buffers and inflate memory */
; 97   :     if (state->size == 0) {

  00004	83 7f 1c 00	 cmp	 DWORD PTR [edi+28], 0
  00008	8d 5f 64	 lea	 ebx, DWORD PTR [edi+100]
  0000b	0f 85 c6 00 00
	00		 jne	 $LN7@gz_look

; 98   :         /* allocate buffers */
; 99   :         state->in = (unsigned char *)malloc(state->want);

  00011	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00014	56		 push	 esi
  00015	50		 push	 eax
  00016	e8 00 00 00 00	 call	 _malloc

; 100  :         state->out = (unsigned char *)malloc(state->want << 1);

  0001b	8b 4f 20	 mov	 ecx, DWORD PTR [edi+32]
  0001e	8b f0		 mov	 esi, eax
  00020	03 c9		 add	 ecx, ecx
  00022	89 77 24	 mov	 DWORD PTR [edi+36], esi
  00025	51		 push	 ecx
  00026	e8 00 00 00 00	 call	 _malloc
  0002b	83 c4 08	 add	 esp, 8
  0002e	89 47 28	 mov	 DWORD PTR [edi+40], eax

; 101  :         if (state->in == NULL || state->out == NULL) {

  00031	85 f6		 test	 esi, esi
  00033	5e		 pop	 esi
  00034	74 79		 je	 SHORT $LN8@gz_look
  00036	85 c0		 test	 eax, eax
  00038	74 75		 je	 SHORT $LN8@gz_look

; 106  :         }
; 107  :         state->size = state->want;

  0003a	8b 47 20	 mov	 eax, DWORD PTR [edi+32]

; 108  : 
; 109  :         /* allocate inflate memory */
; 110  :         state->strm.zalloc = Z_NULL;
; 111  :         state->strm.zfree = Z_NULL;
; 112  :         state->strm.opaque = Z_NULL;
; 113  :         state->strm.avail_in = 0;
; 114  :         state->strm.next_in = Z_NULL;
; 115  :         if (inflateInit2(&(state->strm), 15 + 16) != Z_OK) {    /* gunzip */

  0003d	6a 38		 push	 56			; 00000038H
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_06CJNJFBNP@1?42?411?$AA@
  00044	6a 1f		 push	 31			; 0000001fH
  00046	53		 push	 ebx
  00047	89 47 1c	 mov	 DWORD PTR [edi+28], eax
  0004a	c7 87 84 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+132], 0
  00054	c7 87 88 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+136], 0
  0005e	c7 87 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [edi+140], 0
  00068	c7 47 68 00 00
	00 00		 mov	 DWORD PTR [edi+104], 0
  0006f	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
  00075	e8 00 00 00 00	 call	 _inflateInit2_@16
  0007a	85 c0		 test	 eax, eax
  0007c	74 59		 je	 SHORT $LN7@gz_look

; 116  :             free(state->out);

  0007e	ff 77 28	 push	 DWORD PTR [edi+40]
  00081	e8 00 00 00 00	 call	 _free

; 117  :             free(state->in);

  00086	ff 77 24	 push	 DWORD PTR [edi+36]
  00089	e8 00 00 00 00	 call	 _free

; 118  :             state->size = 0;
; 119  :             gz_error(state, Z_MEM_ERROR, "out of memory");

  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@
  00093	ba fc ff ff ff	 mov	 edx, -4			; fffffffcH
  00098	c7 47 1c 00 00
	00 00		 mov	 DWORD PTR [edi+28], 0
  0009f	8b cf		 mov	 ecx, edi
  000a1	e8 00 00 00 00	 call	 _gz_error
  000a6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 120  :             return -1;

  000a9	83 c8 ff	 or	 eax, -1
  000ac	5f		 pop	 edi
  000ad	5b		 pop	 ebx

; 168  : }

  000ae	c3		 ret	 0
$LN8@gz_look:

; 102  :             free(state->out);

  000af	50		 push	 eax
  000b0	e8 00 00 00 00	 call	 _free

; 103  :             free(state->in);

  000b5	ff 77 24	 push	 DWORD PTR [edi+36]
  000b8	e8 00 00 00 00	 call	 _free

; 104  :             gz_error(state, Z_MEM_ERROR, "out of memory");

  000bd	68 00 00 00 00	 push	 OFFSET ??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@
  000c2	ba fc ff ff ff	 mov	 edx, -4			; fffffffcH
  000c7	8b cf		 mov	 ecx, edi
  000c9	e8 00 00 00 00	 call	 _gz_error
  000ce	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN14@gz_look:

; 105  :             return -1;

  000d1	5f		 pop	 edi
  000d2	83 c8 ff	 or	 eax, -1
  000d5	5b		 pop	 ebx

; 168  : }

  000d6	c3		 ret	 0
$LN7@gz_look:

; 121  :         }
; 122  :     }
; 123  : 
; 124  :     /* get at least the magic bytes in the input buffer */
; 125  :     if (strm->avail_in < 2) {

  000d7	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000da	83 f8 02	 cmp	 eax, 2
  000dd	73 13		 jae	 SHORT $LN4@gz_look

; 126  :         if (gz_avail(state) == -1)

  000df	8b cf		 mov	 ecx, edi
  000e1	e8 00 00 00 00	 call	 _gz_avail
  000e6	83 f8 ff	 cmp	 eax, -1
  000e9	74 e6		 je	 SHORT $LN14@gz_look

; 127  :             return -1;
; 128  :         if (strm->avail_in == 0)

  000eb	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000ee	85 c0		 test	 eax, eax
  000f0	74 7d		 je	 SHORT $LN13@gz_look
$LN4@gz_look:

; 129  :             return 0;
; 130  :     }
; 131  : 
; 132  :     /* look for gzip magic bytes -- if there, do gzip decoding (note: there is
; 133  :        a logical dilemma here when considering the case of a partially written
; 134  :        gzip file, to wit, if a single 31 byte is written, then we cannot tell
; 135  :        whether this is a single-byte file, or just a partially written gzip
; 136  :        file -- for here we assume that if a gzip file is being written, then
; 137  :        the header will be written in a single operation, so that reading a
; 138  :        single byte is sufficient indication that it is not a gzip file) */
; 139  :     if (strm->avail_in > 1 &&
; 140  :             strm->next_in[0] == 31 && strm->next_in[1] == 139) {

  000f2	83 f8 01	 cmp	 eax, 1
  000f5	76 26		 jbe	 SHORT $LN3@gz_look
  000f7	8b 03		 mov	 eax, DWORD PTR [ebx]
  000f9	80 38 1f	 cmp	 BYTE PTR [eax], 31	; 0000001fH
  000fc	75 1f		 jne	 SHORT $LN3@gz_look
  000fe	80 78 01 8b	 cmp	 BYTE PTR [eax+1], 139	; 0000008bH
  00102	75 19		 jne	 SHORT $LN3@gz_look

; 141  :         inflateReset(strm);

  00104	53		 push	 ebx
  00105	e8 00 00 00 00	 call	 _inflateReset@4

; 142  :         state->how = GZIP;

  0010a	c7 47 30 02 00
	00 00		 mov	 DWORD PTR [edi+48], 2

; 167  :     return 0;

  00111	33 c0		 xor	 eax, eax
  00113	c7 47 2c 00 00
	00 00		 mov	 DWORD PTR [edi+44], 0
  0011a	5f		 pop	 edi
  0011b	5b		 pop	 ebx

; 168  : }

  0011c	c3		 ret	 0
$LN3@gz_look:

; 143  :         state->direct = 0;
; 144  :         return 0;
; 145  :     }
; 146  : 
; 147  :     /* no gzip header -- if we were decoding gzip before, then this is trailing
; 148  :        garbage.  Ignore the trailing garbage and finish. */
; 149  :     if (state->direct == 0) {

  0011d	83 7f 2c 00	 cmp	 DWORD PTR [edi+44], 0
  00121	75 19		 jne	 SHORT $LN2@gz_look

; 150  :         strm->avail_in = 0;

  00123	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0

; 167  :     return 0;

  0012a	33 c0		 xor	 eax, eax
  0012c	c7 47 40 01 00
	00 00		 mov	 DWORD PTR [edi+64], 1
  00133	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
  00139	5f		 pop	 edi
  0013a	5b		 pop	 ebx

; 168  : }

  0013b	c3		 ret	 0
$LN2@gz_look:

; 151  :         state->eof = 1;
; 152  :         state->x.have = 0;
; 153  :         return 0;
; 154  :     }
; 155  : 
; 156  :     /* doing raw i/o, copy any leftover input to output -- this assumes that
; 157  :        the output buffer is larger than the input buffer, which also assures
; 158  :        space for gzungetc() */
; 159  :     state->x.next = state->out;

  0013c	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  0013f	89 47 04	 mov	 DWORD PTR [edi+4], eax

; 160  :     if (strm->avail_in) {

  00142	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00145	85 c9		 test	 ecx, ecx
  00147	74 18		 je	 SHORT $LN1@gz_look

; 161  :         memcpy(state->x.next, strm->next_in, strm->avail_in);

  00149	51		 push	 ecx
  0014a	ff 33		 push	 DWORD PTR [ebx]
  0014c	50		 push	 eax
  0014d	e8 00 00 00 00	 call	 _memcpy

; 162  :         state->x.have = strm->avail_in;

  00152	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00155	83 c4 0c	 add	 esp, 12			; 0000000cH
  00158	89 07		 mov	 DWORD PTR [edi], eax

; 163  :         strm->avail_in = 0;

  0015a	c7 43 04 00 00
	00 00		 mov	 DWORD PTR [ebx+4], 0
$LN1@gz_look:

; 164  :     }
; 165  :     state->how = COPY;

  00161	c7 47 30 01 00
	00 00		 mov	 DWORD PTR [edi+48], 1

; 166  :     state->direct = 1;

  00168	c7 47 2c 01 00
	00 00		 mov	 DWORD PTR [edi+44], 1
$LN13@gz_look:

; 167  :     return 0;

  0016f	5f		 pop	 edi
  00170	33 c0		 xor	 eax, eax
  00172	5b		 pop	 ebx

; 168  : }

  00173	c3		 ret	 0
_gz_look ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\git\image2geometry\3rdparty\zlib-1.2.11\gzread.c
;	COMDAT _gz_decomp
_TEXT	SEGMENT
_had$1$ = -4						; size = 4
_gz_decomp PROC						; COMDAT
; _state$ = ecx

; 177  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx

; 178  :     int ret = Z_OK;
; 179  :     unsigned had;
; 180  :     z_streamp strm = &(state->strm);
; 181  : 
; 182  :     /* fill output buffer up to end of deflate stream */
; 183  :     had = strm->avail_out;

  00007	8b 43 74	 mov	 eax, DWORD PTR [ebx+116]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d 7b 64	 lea	 edi, DWORD PTR [ebx+100]
  0000f	89 45 fc	 mov	 DWORD PTR _had$1$[ebp], eax
  00012	33 f6		 xor	 esi, esi
$LL11@gz_decomp:

; 184  :     do {
; 185  :         /* get more input for inflate() */
; 186  :         if (strm->avail_in == 0 && gz_avail(state) == -1)

  00014	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  00018	75 16		 jne	 SHORT $LN24@gz_decomp
  0001a	8b cb		 mov	 ecx, ebx
  0001c	e8 00 00 00 00	 call	 _gz_avail
  00021	83 f8 ff	 cmp	 eax, -1
  00024	0f 84 cb 00 00
	00		 je	 $LN17@gz_decomp

; 187  :             return -1;
; 188  :         if (strm->avail_in == 0) {

  0002a	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  0002e	74 33		 je	 SHORT $LN18@gz_decomp
$LN24@gz_decomp:

; 190  :             break;
; 191  :         }
; 192  : 
; 193  :         /* decompress and handle errors */
; 194  :         ret = inflate(strm, Z_NO_FLUSH);

  00030	6a 00		 push	 0
  00032	57		 push	 edi
  00033	e8 00 00 00 00	 call	 _inflate@8
  00038	8b f0		 mov	 esi, eax

; 195  :         if (ret == Z_STREAM_ERROR || ret == Z_NEED_DICT) {

  0003a	83 fe fe	 cmp	 esi, -2			; fffffffeH
  0003d	0f 84 9e 00 00
	00		 je	 $LN5@gz_decomp
  00043	83 fe 02	 cmp	 esi, 2
  00046	0f 84 95 00 00
	00		 je	 $LN5@gz_decomp

; 199  :         }
; 200  :         if (ret == Z_MEM_ERROR) {

  0004c	83 fe fc	 cmp	 esi, -4			; fffffffcH
  0004f	74 72		 je	 SHORT $LN20@gz_decomp

; 202  :             return -1;
; 203  :         }
; 204  :         if (ret == Z_DATA_ERROR) {              /* deflate stream invalid */

  00051	83 fe fd	 cmp	 esi, -3			; fffffffdH
  00054	74 46		 je	 SHORT $LN21@gz_decomp

; 207  :             return -1;
; 208  :         }
; 209  :     } while (strm->avail_out && ret != Z_STREAM_END);

  00056	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  0005a	74 1b		 je	 SHORT $LN9@gz_decomp
  0005c	83 fe 01	 cmp	 esi, 1
  0005f	75 b3		 jne	 SHORT $LL11@gz_decomp
  00061	eb 14		 jmp	 SHORT $LN9@gz_decomp
$LN18@gz_decomp:

; 189  :             gz_error(state, Z_BUF_ERROR, "unexpected end of file");

  00063	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@CFIIDOJD@unexpected?5end?5of?5file?$AA@
  00068	ba fb ff ff ff	 mov	 edx, -5			; fffffffbH
  0006d	8b cb		 mov	 ecx, ebx
  0006f	e8 00 00 00 00	 call	 _gz_error
  00074	83 c4 04	 add	 esp, 4
$LN9@gz_decomp:

; 210  : 
; 211  :     /* update available output */
; 212  :     state->x.have = had - strm->avail_out;

  00077	8b 4d fc	 mov	 ecx, DWORD PTR _had$1$[ebp]
  0007a	2b 4f 10	 sub	 ecx, DWORD PTR [edi+16]
  0007d	89 0b		 mov	 DWORD PTR [ebx], ecx

; 213  :     state->x.next = strm->next_out - state->x.have;

  0007f	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00082	2b c1		 sub	 eax, ecx
  00084	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 214  : 
; 215  :     /* if the gzip stream completed successfully, look for another */
; 216  :     if (ret == Z_STREAM_END)

  00087	83 fe 01	 cmp	 esi, 1
  0008a	75 07		 jne	 SHORT $LN1@gz_decomp

; 217  :         state->how = LOOK;

  0008c	c7 43 30 00 00
	00 00		 mov	 DWORD PTR [ebx+48], 0
$LN1@gz_decomp:
  00093	5f		 pop	 edi
  00094	5e		 pop	 esi

; 218  : 
; 219  :     /* good decompression */
; 220  :     return 0;

  00095	33 c0		 xor	 eax, eax
  00097	5b		 pop	 ebx

; 221  : }

  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
$LN21@gz_decomp:

; 205  :             gz_error(state, Z_DATA_ERROR,
; 206  :                      strm->msg == NULL ? "compressed data error" : strm->msg);

  0009c	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  0009f	b9 00 00 00 00	 mov	 ecx, OFFSET ??_C@_0BG@HCKBMIHF@compressed?5data?5error?$AA@
  000a4	85 c0		 test	 eax, eax
  000a6	ba fd ff ff ff	 mov	 edx, -3			; fffffffdH
  000ab	0f 45 c8	 cmovne	 ecx, eax
  000ae	51		 push	 ecx
  000af	8b cb		 mov	 ecx, ebx
  000b1	e8 00 00 00 00	 call	 _gz_error
  000b6	83 c4 04	 add	 esp, 4
  000b9	83 c8 ff	 or	 eax, -1
  000bc	5f		 pop	 edi
  000bd	5e		 pop	 esi
  000be	5b		 pop	 ebx

; 221  : }

  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c3		 ret	 0
$LN20@gz_decomp:

; 201  :             gz_error(state, Z_MEM_ERROR, "out of memory");

  000c3	68 00 00 00 00	 push	 OFFSET ??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@
  000c8	ba fc ff ff ff	 mov	 edx, -4			; fffffffcH
  000cd	8b cb		 mov	 ecx, ebx
  000cf	e8 00 00 00 00	 call	 _gz_error
  000d4	83 c4 04	 add	 esp, 4
  000d7	83 c8 ff	 or	 eax, -1
  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	5b		 pop	 ebx

; 221  : }

  000dd	8b e5		 mov	 esp, ebp
  000df	5d		 pop	 ebp
  000e0	c3		 ret	 0
$LN5@gz_decomp:

; 196  :             gz_error(state, Z_STREAM_ERROR,
; 197  :                      "internal error: inflate stream corrupt");

  000e1	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@CPOLIEKA@internal?5error?3?5inflate?5stream?5c@
  000e6	ba fe ff ff ff	 mov	 edx, -2			; fffffffeH
  000eb	8b cb		 mov	 ecx, ebx
  000ed	e8 00 00 00 00	 call	 _gz_error
  000f2	83 c4 04	 add	 esp, 4
$LN17@gz_decomp:

; 198  :             return -1;

  000f5	5f		 pop	 edi
  000f6	5e		 pop	 esi
  000f7	83 c8 ff	 or	 eax, -1
  000fa	5b		 pop	 ebx

; 221  : }

  000fb	8b e5		 mov	 esp, ebp
  000fd	5d		 pop	 ebp
  000fe	c3		 ret	 0
_gz_decomp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\git\image2geometry\3rdparty\zlib-1.2.11\gzread.c
;	COMDAT _gz_fetch
_TEXT	SEGMENT
_gz_fetch PROC						; COMDAT
; _state$ = ecx

; 231  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
$LL13@gz_fetch:

; 232  :     z_streamp strm = &(state->strm);
; 233  : 
; 234  :     do {
; 235  :         switch(state->how) {

  00003	8b 46 30	 mov	 eax, DWORD PTR [esi+48]
  00006	83 e8 00	 sub	 eax, 0
  00009	74 25		 je	 SHORT $LN8@gz_fetch
  0000b	48		 dec	 eax
  0000c	74 49		 je	 SHORT $LN5@gz_fetch
  0000e	48		 dec	 eax
  0000f	75 31		 jne	 SHORT $LN12@gz_fetch

; 248  :         case GZIP:      /* -> GZIP or LOOK (if end of gzip stream) */
; 249  :             strm->avail_out = state->size << 1;

  00011	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]

; 250  :             strm->next_out = state->out;
; 251  :             if (gz_decomp(state) == -1)

  00014	8b ce		 mov	 ecx, esi
  00016	03 c0		 add	 eax, eax
  00018	89 46 74	 mov	 DWORD PTR [esi+116], eax
  0001b	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0001e	89 46 70	 mov	 DWORD PTR [esi+112], eax
  00021	e8 00 00 00 00	 call	 _gz_decomp
  00026	83 f8 ff	 cmp	 eax, -1
  00029	75 17		 jne	 SHORT $LN12@gz_fetch
$LN19@gz_fetch:

; 238  :                 return -1;

  0002b	83 c8 ff	 or	 eax, -1
  0002e	5e		 pop	 esi

; 255  :     return 0;
; 256  : }

  0002f	c3		 ret	 0
$LN8@gz_fetch:

; 236  :         case LOOK:      /* -> LOOK, COPY (only if never GZIP), or GZIP */
; 237  :             if (gz_look(state) == -1)

  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 _gz_look
  00037	83 f8 ff	 cmp	 eax, -1
  0003a	74 ef		 je	 SHORT $LN19@gz_fetch

; 239  :             if (state->how == LOOK)

  0003c	83 7e 30 00	 cmp	 DWORD PTR [esi+48], 0
  00040	74 34		 je	 SHORT $LN20@gz_fetch
$LN12@gz_fetch:

; 252  :                 return -1;
; 253  :         }
; 254  :     } while (state->x.have == 0 && (!state->eof || strm->avail_in));

  00042	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00045	75 2f		 jne	 SHORT $LN20@gz_fetch
  00047	83 7e 40 00	 cmp	 DWORD PTR [esi+64], 0
  0004b	74 b6		 je	 SHORT $LL13@gz_fetch
  0004d	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  00051	75 b0		 jne	 SHORT $LL13@gz_fetch

; 247  :             return 0;

  00053	33 c0		 xor	 eax, eax
  00055	5e		 pop	 esi

; 255  :     return 0;
; 256  : }

  00056	c3		 ret	 0
$LN5@gz_fetch:

; 240  :                 return 0;
; 241  :             break;
; 242  :         case COPY:      /* -> COPY */
; 243  :             if (gz_load(state, state->out, state->size << 1, &(state->x.have))
; 244  :                     == -1)

  00057	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0005a	8b ce		 mov	 ecx, esi
  0005c	8b 56 28	 mov	 edx, DWORD PTR [esi+40]
  0005f	03 c0		 add	 eax, eax
  00061	56		 push	 esi
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 _gz_load
  00068	83 c4 08	 add	 esp, 8
  0006b	83 f8 ff	 cmp	 eax, -1
  0006e	74 bb		 je	 SHORT $LN19@gz_fetch

; 245  :                 return -1;
; 246  :             state->x.next = state->out;

  00070	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00073	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN20@gz_fetch:

; 247  :             return 0;

  00076	33 c0		 xor	 eax, eax
  00078	5e		 pop	 esi

; 255  :     return 0;
; 256  : }

  00079	c3		 ret	 0
_gz_fetch ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\git\image2geometry\3rdparty\zlib-1.2.11\gzread.c
;	COMDAT _gz_skip
_TEXT	SEGMENT
_len$ = 8						; size = 8
_gz_skip PROC						; COMDAT
; _state$ = ecx

; 262  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 263  :     unsigned n;
; 264  : 
; 265  :     /* skip over len bytes or reach end-of-file, whichever comes first */
; 266  :     while (len)

  00004	8b 5d 0c	 mov	 ebx, DWORD PTR _len$[ebp+4]
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b 7d 08	 mov	 edi, DWORD PTR _len$[ebp]
  0000c	8b f1		 mov	 esi, ecx
  0000e	8b c7		 mov	 eax, edi
  00010	0b c3		 or	 eax, ebx
  00012	74 4b		 je	 SHORT $LN6@gz_skip
$LL7@gz_skip:

; 267  :         /* skip over whatever is in output buffer */
; 268  :         if (state->x.have) {

  00014	8b 06		 mov	 eax, DWORD PTR [esi]
  00016	85 c0		 test	 eax, eax
  00018	74 27		 je	 SHORT $LN5@gz_skip

; 269  :             n = GT_OFF(state->x.have) || (z_off64_t)state->x.have > len ?
; 270  :                 (unsigned)len : state->x.have;

  0001a	33 c9		 xor	 ecx, ecx
  0001c	3b cb		 cmp	 ecx, ebx
  0001e	7f 0a		 jg	 SHORT $LN10@gz_skip
  00020	7c 04		 jl	 SHORT $LN17@gz_skip
  00022	3b c7		 cmp	 eax, edi
  00024	77 04		 ja	 SHORT $LN10@gz_skip
$LN17@gz_skip:
  00026	8b c8		 mov	 ecx, eax
  00028	eb 02		 jmp	 SHORT $LN11@gz_skip
$LN10@gz_skip:
  0002a	8b cf		 mov	 ecx, edi
$LN11@gz_skip:

; 271  :             state->x.have -= n;
; 272  :             state->x.next += n;

  0002c	01 4e 04	 add	 DWORD PTR [esi+4], ecx
  0002f	2b c1		 sub	 eax, ecx

; 273  :             state->x.pos += n;

  00031	01 4e 08	 add	 DWORD PTR [esi+8], ecx
  00034	89 06		 mov	 DWORD PTR [esi], eax
  00036	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0

; 274  :             len -= n;

  0003a	2b f9		 sub	 edi, ecx
  0003c	83 db 00	 sbb	 ebx, 0
  0003f	eb 18		 jmp	 SHORT $LN1@gz_skip
$LN5@gz_skip:

; 275  :         }
; 276  : 
; 277  :         /* output buffer empty -- return if we're at the end of the input */
; 278  :         else if (state->eof && state->strm.avail_in == 0)

  00041	83 7e 40 00	 cmp	 DWORD PTR [esi+64], 0
  00045	74 06		 je	 SHORT $LN3@gz_skip
  00047	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  0004b	74 12		 je	 SHORT $LN6@gz_skip
$LN3@gz_skip:

; 279  :             break;
; 280  : 
; 281  :         /* need more data to skip -- load up output buffer */
; 282  :         else {
; 283  :             /* get more output, looking for header if required */
; 284  :             if (gz_fetch(state) == -1)

  0004d	8b ce		 mov	 ecx, esi
  0004f	e8 00 00 00 00	 call	 _gz_fetch
  00054	83 f8 ff	 cmp	 eax, -1
  00057	74 0d		 je	 SHORT $LN14@gz_skip
$LN1@gz_skip:

; 263  :     unsigned n;
; 264  : 
; 265  :     /* skip over len bytes or reach end-of-file, whichever comes first */
; 266  :     while (len)

  00059	8b c7		 mov	 eax, edi
  0005b	0b c3		 or	 eax, ebx
  0005d	75 b5		 jne	 SHORT $LL7@gz_skip
$LN6@gz_skip:
  0005f	5f		 pop	 edi
  00060	5e		 pop	 esi

; 286  :         }
; 287  :     return 0;

  00061	33 c0		 xor	 eax, eax
  00063	5b		 pop	 ebx

; 288  : }

  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
$LN14@gz_skip:
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi

; 285  :                 return -1;

  00068	83 c8 ff	 or	 eax, -1
  0006b	5b		 pop	 ebx

; 288  : }

  0006c	5d		 pop	 ebp
  0006d	c3		 ret	 0
_gz_skip ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\git\image2geometry\3rdparty\zlib-1.2.11\gzread.c
;	COMDAT _gz_read
_TEXT	SEGMENT
_n$ = -8						; size = 4
_buf$1$ = -4						; size = 4
_got$1$ = 8						; size = 4
_len$ = 8						; size = 4
_gz_read PROC						; COMDAT
; _state$ = ecx
; _buf$ = edx

; 298  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx

; 299  :     z_size_t got;
; 300  :     unsigned n;
; 301  : 
; 302  :     /* if len is zero, avoid unnecessary operations */
; 303  :     if (len == 0)

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _len$[ebp]
  0000a	89 55 fc	 mov	 DWORD PTR _buf$1$[ebp], edx
  0000d	56		 push	 esi
  0000e	8b f1		 mov	 esi, ecx
  00010	85 db		 test	 ebx, ebx
  00012	75 08		 jne	 SHORT $LN20@gz_read
$LN32@gz_read:
  00014	5e		 pop	 esi

; 304  :         return 0;

  00015	33 c0		 xor	 eax, eax
  00017	5b		 pop	 ebx

; 372  : }

  00018	8b e5		 mov	 esp, ebp
  0001a	5d		 pop	 ebp
  0001b	c3		 ret	 0
$LN20@gz_read:

; 305  : 
; 306  :     /* process a skip request */
; 307  :     if (state->seek) {

  0001c	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  00020	74 1d		 je	 SHORT $LN18@gz_read

; 308  :         state->seek = 0;
; 309  :         if (gz_skip(state, state->skip) == -1)

  00022	ff 76 54	 push	 DWORD PTR [esi+84]
  00025	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  0002c	ff 76 50	 push	 DWORD PTR [esi+80]
  0002f	e8 00 00 00 00	 call	 _gz_skip
  00034	83 c4 08	 add	 esp, 8
  00037	83 f8 ff	 cmp	 eax, -1
  0003a	74 d8		 je	 SHORT $LN32@gz_read
  0003c	8b 55 fc	 mov	 edx, DWORD PTR _buf$1$[ebp]
$LN18@gz_read:

; 310  :             return 0;
; 311  :     }
; 312  : 
; 313  :     /* get len bytes to buf, or less than len if at the end */
; 314  :     got = 0;

  0003f	33 c9		 xor	 ecx, ecx
  00041	89 4d 08	 mov	 DWORD PTR _got$1$[ebp], ecx
  00044	57		 push	 edi
$LL17@gz_read:

; 315  :     do {
; 316  :         /* set n to the maximum amount of len that fits in an unsigned int */
; 317  :         n = -1;
; 318  :         if (n > len)
; 319  :             n = len;
; 320  : 
; 321  :         /* first just try copying data from the output buffer */
; 322  :         if (state->x.have) {

  00045	8b 06		 mov	 eax, DWORD PTR [esi]
  00047	83 cf ff	 or	 edi, -1
  0004a	83 fb ff	 cmp	 ebx, -1
  0004d	0f 42 fb	 cmovb	 edi, ebx
  00050	89 7d f8	 mov	 DWORD PTR _n$[ebp], edi
  00053	85 c0		 test	 eax, eax
  00055	74 19		 je	 SHORT $LN13@gz_read

; 323  :             if (state->x.have < n)

  00057	3b c7		 cmp	 eax, edi
  00059	0f 42 f8	 cmovb	 edi, eax

; 324  :                 n = state->x.have;
; 325  :             memcpy(buf, state->x.next, n);

  0005c	57		 push	 edi
  0005d	ff 76 04	 push	 DWORD PTR [esi+4]
  00060	52		 push	 edx
  00061	e8 00 00 00 00	 call	 _memcpy

; 326  :             state->x.next += n;

  00066	01 7e 04	 add	 DWORD PTR [esi+4], edi
  00069	83 c4 0c	 add	 esp, 12			; 0000000cH

; 327  :             state->x.have -= n;

  0006c	29 3e		 sub	 DWORD PTR [esi], edi
  0006e	eb 56		 jmp	 SHORT $LN2@gz_read
$LN13@gz_read:

; 328  :         }
; 329  : 
; 330  :         /* output buffer empty -- return if we're at the end of the input */
; 331  :         else if (state->eof && state->strm.avail_in == 0) {

  00070	83 7e 40 00	 cmp	 DWORD PTR [esi+64], 0
  00074	74 0a		 je	 SHORT $LN10@gz_read
  00076	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  0007a	0f 84 84 00 00
	00		 je	 $LN24@gz_read
$LN10@gz_read:

; 333  :             break;
; 334  :         }
; 335  : 
; 336  :         /* need output data -- for small len or new stream load up our output
; 337  :            buffer */
; 338  :         else if (state->how == LOOK || n < (state->size << 1)) {

  00080	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  00083	85 c9		 test	 ecx, ecx
  00085	74 5a		 je	 SHORT $LN7@gz_read
  00087	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0008a	03 c0		 add	 eax, eax
  0008c	3b f8		 cmp	 edi, eax
  0008e	72 51		 jb	 SHORT $LN7@gz_read

; 342  :             continue;       /* no progress yet -- go back to copy above */
; 343  :             /* the copy above assures that we will leave with space in the
; 344  :                output buffer, allowing at least one gzungetc() to succeed */
; 345  :         }
; 346  : 
; 347  :         /* large len -- read directly into user buffer */
; 348  :         else if (state->how == COPY) {      /* read directly */

  00090	83 f9 01	 cmp	 ecx, 1

; 349  :             if (gz_load(state, (unsigned char *)buf, n, &n) == -1)

  00093	8b ce		 mov	 ecx, esi
  00095	75 17		 jne	 SHORT $LN4@gz_read
  00097	8d 45 f8	 lea	 eax, DWORD PTR _n$[ebp]
  0009a	50		 push	 eax
  0009b	57		 push	 edi
  0009c	e8 00 00 00 00	 call	 _gz_load
  000a1	83 c4 08	 add	 esp, 8
  000a4	83 f8 ff	 cmp	 eax, -1
  000a7	74 6b		 je	 SHORT $LN27@gz_read

; 350  :                 return 0;
; 351  :         }
; 352  : 
; 353  :         /* large len -- decompress directly into user buffer */
; 354  :         else {  /* state->how == GZIP */

  000a9	8b 7d f8	 mov	 edi, DWORD PTR _n$[ebp]
  000ac	eb 18		 jmp	 SHORT $LN2@gz_read
$LN4@gz_read:

; 355  :             state->strm.avail_out = n;

  000ae	89 7e 74	 mov	 DWORD PTR [esi+116], edi

; 356  :             state->strm.next_out = (unsigned char *)buf;

  000b1	89 56 70	 mov	 DWORD PTR [esi+112], edx

; 357  :             if (gz_decomp(state) == -1)

  000b4	e8 00 00 00 00	 call	 _gz_decomp
  000b9	83 f8 ff	 cmp	 eax, -1
  000bc	74 56		 je	 SHORT $LN27@gz_read

; 358  :                 return 0;
; 359  :             n = state->x.have;

  000be	8b 3e		 mov	 edi, DWORD PTR [esi]

; 360  :             state->x.have = 0;

  000c0	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$LN2@gz_read:

; 361  :         }
; 362  : 
; 363  :         /* update progress */
; 364  :         len -= n;
; 365  :         buf = (char *)buf + n;

  000c6	8b 55 fc	 mov	 edx, DWORD PTR _buf$1$[ebp]
  000c9	2b df		 sub	 ebx, edi

; 366  :         got += n;

  000cb	8b 4d 08	 mov	 ecx, DWORD PTR _got$1$[ebp]
  000ce	03 d7		 add	 edx, edi
  000d0	03 cf		 add	 ecx, edi
  000d2	89 55 fc	 mov	 DWORD PTR _buf$1$[ebp], edx

; 367  :         state->x.pos += n;

  000d5	01 7e 08	 add	 DWORD PTR [esi+8], edi
  000d8	89 4d 08	 mov	 DWORD PTR _got$1$[ebp], ecx
  000db	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0
  000df	eb 12		 jmp	 SHORT $LN16@gz_read
$LN7@gz_read:

; 339  :             /* get more output, looking for header if required */
; 340  :             if (gz_fetch(state) == -1)

  000e1	8b ce		 mov	 ecx, esi
  000e3	e8 00 00 00 00	 call	 _gz_fetch
  000e8	83 f8 ff	 cmp	 eax, -1
  000eb	74 27		 je	 SHORT $LN27@gz_read
  000ed	8b 55 fc	 mov	 edx, DWORD PTR _buf$1$[ebp]
  000f0	8b 4d 08	 mov	 ecx, DWORD PTR _got$1$[ebp]
$LN16@gz_read:

; 368  :     } while (len);

  000f3	85 db		 test	 ebx, ebx
  000f5	0f 85 4a ff ff
	ff		 jne	 $LL17@gz_read

; 369  : 
; 370  :     /* return number of bytes read into user buffer */
; 371  :     return got;

  000fb	5f		 pop	 edi
  000fc	5e		 pop	 esi
  000fd	8b c1		 mov	 eax, ecx
  000ff	5b		 pop	 ebx

; 372  : }

  00100	8b e5		 mov	 esp, ebp
  00102	5d		 pop	 ebp
  00103	c3		 ret	 0
$LN24@gz_read:
  00104	5f		 pop	 edi

; 332  :             state->past = 1;        /* tried to read past end */

  00105	c7 46 44 01 00
	00 00		 mov	 DWORD PTR [esi+68], 1

; 369  : 
; 370  :     /* return number of bytes read into user buffer */
; 371  :     return got;

  0010c	8b c1		 mov	 eax, ecx
  0010e	5e		 pop	 esi
  0010f	5b		 pop	 ebx

; 372  : }

  00110	8b e5		 mov	 esp, ebp
  00112	5d		 pop	 ebp
  00113	c3		 ret	 0
$LN27@gz_read:
  00114	5f		 pop	 edi
  00115	5e		 pop	 esi

; 341  :                 return 0;

  00116	33 c0		 xor	 eax, eax
  00118	5b		 pop	 ebx

; 372  : }

  00119	8b e5		 mov	 esp, ebp
  0011b	5d		 pop	 ebp
  0011c	c3		 ret	 0
_gz_read ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\git\image2geometry\3rdparty\zlib-1.2.11\gzread.c
;	COMDAT _gzread@12
_TEXT	SEGMENT
_file$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_gzread@12 PROC						; COMDAT

; 379  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 380  :     gz_statep state;
; 381  : 
; 382  :     /* get internal structure */
; 383  :     if (file == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 54		 je	 SHORT $LN3@gzread

; 384  :         return -1;
; 385  :     state = (gz_statep)file;
; 386  : 
; 387  :     /* check that we're reading and that there's no (serious) error */
; 388  :     if (state->mode != GZ_READ ||
; 389  :             (state->err != Z_OK && state->err != Z_BUF_ERROR))

  0000b	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  00012	75 4b		 jne	 SHORT $LN3@gzread
  00014	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00017	85 c0		 test	 eax, eax
  00019	74 05		 je	 SHORT $LN4@gzread
  0001b	83 f8 fb	 cmp	 eax, -5			; fffffffbH
  0001e	75 3f		 jne	 SHORT $LN3@gzread
$LN4@gzread:

; 391  : 
; 392  :     /* since an int is returned, make sure len fits in one, otherwise return
; 393  :        with an error (this avoids a flaw in the interface) */
; 394  :     if ((int)len < 0) {

  00020	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]

; 395  :         gz_error(state, Z_STREAM_ERROR, "request does not fit in an int");

  00023	8b ce		 mov	 ecx, esi
  00025	85 c0		 test	 eax, eax
  00027	79 1a		 jns	 SHORT $LN2@gzread
  00029	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@HLDABFKK@request?5does?5not?5fit?5in?5an?5int?$AA@
  0002e	ba fe ff ff ff	 mov	 edx, -2			; fffffffeH
  00033	e8 00 00 00 00	 call	 _gz_error
  00038	83 c4 04	 add	 esp, 4
  0003b	83 c8 ff	 or	 eax, -1
  0003e	5e		 pop	 esi

; 404  :         return -1;
; 405  : 
; 406  :     /* return the number of bytes read (this is assured to fit in an int) */
; 407  :     return (int)len;
; 408  : }

  0003f	5d		 pop	 ebp
  00040	c2 0c 00	 ret	 12			; 0000000cH
$LN2@gzread:

; 396  :         return -1;
; 397  :     }
; 398  : 
; 399  :     /* read len or fewer bytes to buf */
; 400  :     len = gz_read(state, buf, len);

  00043	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 _gz_read
  0004c	83 c4 04	 add	 esp, 4

; 401  : 
; 402  :     /* check for an error */
; 403  :     if (len == 0 && state->err != Z_OK && state->err != Z_BUF_ERROR)

  0004f	85 c0		 test	 eax, eax
  00051	75 0f		 jne	 SHORT $LN6@gzread
  00053	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  00056	85 c9		 test	 ecx, ecx
  00058	74 08		 je	 SHORT $LN6@gzread
  0005a	83 f9 fb	 cmp	 ecx, -5			; fffffffbH
  0005d	74 03		 je	 SHORT $LN6@gzread
$LN3@gzread:

; 390  :         return -1;

  0005f	83 c8 ff	 or	 eax, -1
$LN6@gzread:
  00062	5e		 pop	 esi

; 404  :         return -1;
; 405  : 
; 406  :     /* return the number of bytes read (this is assured to fit in an int) */
; 407  :     return (int)len;
; 408  : }

  00063	5d		 pop	 ebp
  00064	c2 0c 00	 ret	 12			; 0000000cH
_gzread@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\git\image2geometry\3rdparty\zlib-1.2.11\gzread.c
;	COMDAT _gzfread@16
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_size$ = 12						; size = 4
_nitems$ = 16						; size = 4
_file$ = 20						; size = 4
_gzfread@16 PROC					; COMDAT

; 416  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 417  :     z_size_t len;
; 418  :     gz_statep state;
; 419  : 
; 420  :     /* get internal structure */
; 421  :     if (file == NULL)

  00003	8b 4d 14	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 06		 jne	 SHORT $LN4@gzfread
$LN2@gzfread:

; 422  :         return 0;

  0000a	33 c0		 xor	 eax, eax

; 439  : }

  0000c	5d		 pop	 ebp
  0000d	c2 10 00	 ret	 16			; 00000010H
$LN4@gzfread:

; 423  :     state = (gz_statep)file;
; 424  : 
; 425  :     /* check that we're reading and that there's no (serious) error */
; 426  :     if (state->mode != GZ_READ ||
; 427  :             (state->err != Z_OK && state->err != Z_BUF_ERROR))

  00010	81 79 10 4f 1c
	00 00		 cmp	 DWORD PTR [ecx+16], 7247 ; 00001c4fH
  00017	75 f1		 jne	 SHORT $LN2@gzfread
  00019	8b 41 5c	 mov	 eax, DWORD PTR [ecx+92]
  0001c	85 c0		 test	 eax, eax
  0001e	74 05		 je	 SHORT $LN3@gzfread
  00020	83 f8 fb	 cmp	 eax, -5			; fffffffbH
  00023	75 e5		 jne	 SHORT $LN2@gzfread
$LN3@gzfread:
  00025	56		 push	 esi
  00026	57		 push	 edi

; 428  :         return 0;
; 429  : 
; 430  :     /* compute bytes to read -- error on overflow */
; 431  :     len = nitems * size;

  00027	8b 7d 0c	 mov	 edi, DWORD PTR _size$[ebp]
  0002a	8b f7		 mov	 esi, edi
  0002c	0f af 75 10	 imul	 esi, DWORD PTR _nitems$[ebp]

; 432  :     if (size && len / size != nitems) {

  00030	85 ff		 test	 edi, edi
  00032	74 25		 je	 SHORT $LN1@gzfread
  00034	33 d2		 xor	 edx, edx
  00036	8b c6		 mov	 eax, esi
  00038	f7 f7		 div	 edi
  0003a	3b 45 10	 cmp	 eax, DWORD PTR _nitems$[ebp]
  0003d	74 1a		 je	 SHORT $LN1@gzfread

; 433  :         gz_error(state, Z_STREAM_ERROR, "request does not fit in a size_t");

  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@EGGJDMIK@request?5does?5not?5fit?5in?5a?5size_t@
  00044	ba fe ff ff ff	 mov	 edx, -2			; fffffffeH
  00049	e8 00 00 00 00	 call	 _gz_error
  0004e	83 c4 04	 add	 esp, 4
$LN7@gzfread:

; 434  :         return 0;

  00051	5f		 pop	 edi
  00052	33 c0		 xor	 eax, eax
  00054	5e		 pop	 esi

; 439  : }

  00055	5d		 pop	 ebp
  00056	c2 10 00	 ret	 16			; 00000010H
$LN1@gzfread:

; 435  :     }
; 436  : 
; 437  :     /* read len or fewer bytes to buf, return the number of full items read */
; 438  :     return len ? gz_read(state, buf, len) / size : 0;

  00059	85 f6		 test	 esi, esi
  0005b	74 f4		 je	 SHORT $LN7@gzfread
  0005d	8b 55 08	 mov	 edx, DWORD PTR _buf$[ebp]
  00060	56		 push	 esi
  00061	e8 00 00 00 00	 call	 _gz_read
  00066	83 c4 04	 add	 esp, 4
  00069	33 d2		 xor	 edx, edx
  0006b	f7 f7		 div	 edi
  0006d	5f		 pop	 edi
  0006e	5e		 pop	 esi

; 439  : }

  0006f	5d		 pop	 ebp
  00070	c2 10 00	 ret	 16			; 00000010H
_gzfread@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\git\image2geometry\3rdparty\zlib-1.2.11\gzread.c
;	COMDAT _gzgetc@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_buf$ = 11						; size = 1
_gzgetc@4 PROC						; COMDAT

; 449  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 450  :     int ret;
; 451  :     unsigned char buf[1];
; 452  :     gz_statep state;
; 453  : 
; 454  :     /* get internal structure */
; 455  :     if (file == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 54		 je	 SHORT $LN2@gzgetc

; 456  :         return -1;
; 457  :     state = (gz_statep)file;
; 458  : 
; 459  :     /* check that we're reading and that there's no (serious) error */
; 460  :     if (state->mode != GZ_READ ||
; 461  :         (state->err != Z_OK && state->err != Z_BUF_ERROR))

  0000b	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  00012	75 4b		 jne	 SHORT $LN2@gzgetc
  00014	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00017	85 c0		 test	 eax, eax
  00019	74 05		 je	 SHORT $LN3@gzgetc
  0001b	83 f8 fb	 cmp	 eax, -5			; fffffffbH
  0001e	75 3f		 jne	 SHORT $LN2@gzgetc
$LN3@gzgetc:

; 463  : 
; 464  :     /* try output buffer (no need to check for skip request) */
; 465  :     if (state->x.have) {

  00020	8b 06		 mov	 eax, DWORD PTR [esi]
  00022	85 c0		 test	 eax, eax
  00024	74 1c		 je	 SHORT $LN1@gzgetc

; 466  :         state->x.have--;

  00026	48		 dec	 eax

; 467  :         state->x.pos++;

  00027	83 46 08 01	 add	 DWORD PTR [esi+8], 1
  0002b	89 06		 mov	 DWORD PTR [esi], eax

; 468  :         return *(state->x.next)++;

  0002d	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00030	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0
  00034	8a 08		 mov	 cl, BYTE PTR [eax]
  00036	40		 inc	 eax
  00037	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0003a	0f b6 c1	 movzx	 eax, cl
  0003d	5e		 pop	 esi

; 474  : }

  0003e	5d		 pop	 ebp
  0003f	c2 04 00	 ret	 4
$LN1@gzgetc:

; 469  :     }
; 470  : 
; 471  :     /* nothing there -- try gz_read() */
; 472  :     ret = gz_read(state, buf, 1);

  00042	6a 01		 push	 1
  00044	8d 55 0b	 lea	 edx, DWORD PTR _buf$[ebp]
  00047	8b ce		 mov	 ecx, esi
  00049	e8 00 00 00 00	 call	 _gz_read
  0004e	83 c4 04	 add	 esp, 4

; 473  :     return ret < 1 ? -1 : buf[0];

  00051	83 f8 01	 cmp	 eax, 1
  00054	7c 09		 jl	 SHORT $LN2@gzgetc
  00056	0f b6 45 0b	 movzx	 eax, BYTE PTR _buf$[ebp]
  0005a	5e		 pop	 esi

; 474  : }

  0005b	5d		 pop	 ebp
  0005c	c2 04 00	 ret	 4
$LN2@gzgetc:

; 462  :         return -1;

  0005f	83 c8 ff	 or	 eax, -1
  00062	5e		 pop	 esi

; 474  : }

  00063	5d		 pop	 ebp
  00064	c2 04 00	 ret	 4
_gzgetc@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\git\image2geometry\3rdparty\zlib-1.2.11\gzread.c
;	COMDAT _gzgetc_@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzgetc_@4 PROC						; COMDAT

; 478  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 480  : }

  00003	5d		 pop	 ebp

; 479  :     return gzgetc(file);

  00004	e9 00 00 00 00	 jmp	 _gzgetc@4
_gzgetc_@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\git\image2geometry\3rdparty\zlib-1.2.11\gzread.c
;	COMDAT _gzungetc@8
_TEXT	SEGMENT
_c$ = 8							; size = 4
_file$ = 12						; size = 4
_gzungetc@8 PROC					; COMDAT

; 486  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 487  :     gz_statep state;
; 488  : 
; 489  :     /* get internal structure */
; 490  :     if (file == NULL)

  00004	8b 75 0c	 mov	 esi, DWORD PTR _file$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 08		 jne	 SHORT $LN11@gzungetc
$LN21@gzungetc:

; 491  :         return -1;

  0000b	83 c8 ff	 or	 eax, -1
  0000e	5e		 pop	 esi

; 540  : }

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
$LN11@gzungetc:

; 492  :     state = (gz_statep)file;
; 493  : 
; 494  :     /* check that we're reading and that there's no (serious) error */
; 495  :     if (state->mode != GZ_READ ||
; 496  :         (state->err != Z_OK && state->err != Z_BUF_ERROR))

  00013	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  0001a	75 ef		 jne	 SHORT $LN21@gzungetc
  0001c	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  0001f	85 c0		 test	 eax, eax
  00021	74 05		 je	 SHORT $LN10@gzungetc
  00023	83 f8 fb	 cmp	 eax, -5			; fffffffbH
  00026	75 e3		 jne	 SHORT $LN21@gzungetc
$LN10@gzungetc:

; 497  :         return -1;
; 498  : 
; 499  :     /* process a skip request */
; 500  :     if (state->seek) {

  00028	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  0002c	74 1c		 je	 SHORT $LN7@gzungetc

; 501  :         state->seek = 0;
; 502  :         if (gz_skip(state, state->skip) == -1)

  0002e	ff 76 54	 push	 DWORD PTR [esi+84]
  00031	8b ce		 mov	 ecx, esi
  00033	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  0003a	ff 76 50	 push	 DWORD PTR [esi+80]
  0003d	e8 00 00 00 00	 call	 _gz_skip
  00042	83 c4 08	 add	 esp, 8
  00045	83 f8 ff	 cmp	 eax, -1
  00048	74 c1		 je	 SHORT $LN21@gzungetc
$LN7@gzungetc:
  0004a	53		 push	 ebx

; 503  :             return -1;
; 504  :     }
; 505  : 
; 506  :     /* can't push EOF */
; 507  :     if (c < 0)

  0004b	8b 5d 08	 mov	 ebx, DWORD PTR _c$[ebp]
  0004e	85 db		 test	 ebx, ebx
  00050	78 38		 js	 SHORT $LN20@gzungetc

; 508  :         return -1;
; 509  : 
; 510  :     /* if output buffer empty, put byte at end (allows more pushing) */
; 511  :     if (state->x.have == 0) {

  00052	8b 0e		 mov	 ecx, DWORD PTR [esi]

; 512  :         state->x.have = 1;
; 513  :         state->x.next = state->out + (state->size << 1) - 1;

  00054	8b 56 1c	 mov	 edx, DWORD PTR [esi+28]
  00057	85 c9		 test	 ecx, ecx
  00059	75 14		 jne	 SHORT $LN5@gzungetc
  0005b	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
  0005e	c7 06 01 00 00
	00		 mov	 DWORD PTR [esi], 1
  00064	8d 0c 51	 lea	 ecx, DWORD PTR [ecx+edx*2]
  00067	49		 dec	 ecx
  00068	89 4e 04	 mov	 DWORD PTR [esi+4], ecx

; 514  :         state->x.next[0] = (unsigned char)c;

  0006b	88 19		 mov	 BYTE PTR [ecx], bl

; 515  :         state->x.pos--;
; 516  :         state->past = 0;
; 517  :         return c;

  0006d	eb 4e		 jmp	 SHORT $LN19@gzungetc
$LN5@gzungetc:

; 518  :     }
; 519  : 
; 520  :     /* if no room, give up (must have already done a gzungetc()) */
; 521  :     if (state->x.have == (state->size << 1)) {

  0006f	8d 04 12	 lea	 eax, DWORD PTR [edx+edx]
  00072	3b c8		 cmp	 ecx, eax
  00074	75 1d		 jne	 SHORT $LN4@gzungetc

; 522  :         gz_error(state, Z_DATA_ERROR, "out of room to push characters");

  00076	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@IIKIGMCC@out?5of?5room?5to?5push?5characters?$AA@
  0007b	ba fd ff ff ff	 mov	 edx, -3			; fffffffdH
  00080	8b ce		 mov	 ecx, esi
  00082	e8 00 00 00 00	 call	 _gz_error
  00087	83 c4 04	 add	 esp, 4
$LN20@gzungetc:

; 523  :         return -1;

  0008a	5b		 pop	 ebx
  0008b	83 c8 ff	 or	 eax, -1
  0008e	5e		 pop	 esi

; 540  : }

  0008f	5d		 pop	 ebp
  00090	c2 08 00	 ret	 8
$LN4@gzungetc:

; 524  :     }
; 525  : 
; 526  :     /* slide output data if needed and insert byte before existing data */
; 527  :     if (state->x.next == state->out) {

  00093	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00096	39 46 04	 cmp	 DWORD PTR [esi+4], eax
  00099	75 18		 jne	 SHORT $LN3@gzungetc

; 528  :         unsigned char *src = state->out + state->x.have;

  0009b	03 c8		 add	 ecx, eax

; 529  :         unsigned char *dest = state->out + (state->size << 1);

  0009d	8d 14 50	 lea	 edx, DWORD PTR [eax+edx*2]

; 530  :         while (src > state->out)

  000a0	3b c8		 cmp	 ecx, eax
  000a2	76 0c		 jbe	 SHORT $LN1@gzungetc
$LL2@gzungetc:

; 531  :             *--dest = *--src;

  000a4	8a 41 ff	 mov	 al, BYTE PTR [ecx-1]
  000a7	49		 dec	 ecx
  000a8	4a		 dec	 edx
  000a9	88 02		 mov	 BYTE PTR [edx], al
  000ab	3b 4e 28	 cmp	 ecx, DWORD PTR [esi+40]
  000ae	77 f4		 ja	 SHORT $LL2@gzungetc
$LN1@gzungetc:

; 532  :         state->x.next = dest;

  000b0	89 56 04	 mov	 DWORD PTR [esi+4], edx
$LN3@gzungetc:

; 533  :     }
; 534  :     state->x.have++;

  000b3	ff 06		 inc	 DWORD PTR [esi]

; 535  :     state->x.next--;

  000b5	ff 4e 04	 dec	 DWORD PTR [esi+4]
  000b8	8b 46 04	 mov	 eax, DWORD PTR [esi+4]

; 536  :     state->x.next[0] = (unsigned char)c;

  000bb	88 18		 mov	 BYTE PTR [eax], bl
$LN19@gzungetc:

; 537  :     state->x.pos--;

  000bd	83 46 08 ff	 add	 DWORD PTR [esi+8], -1

; 538  :     state->past = 0;
; 539  :     return c;

  000c1	8b c3		 mov	 eax, ebx
  000c3	5b		 pop	 ebx
  000c4	83 56 0c ff	 adc	 DWORD PTR [esi+12], -1
  000c8	c7 46 44 00 00
	00 00		 mov	 DWORD PTR [esi+68], 0
  000cf	5e		 pop	 esi

; 540  : }

  000d0	5d		 pop	 ebp
  000d1	c2 08 00	 ret	 8
_gzungetc@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\git\image2geometry\3rdparty\zlib-1.2.11\gzread.c
;	COMDAT _gzgets@12
_TEXT	SEGMENT
_left$1$ = 8						; size = 4
_file$ = 8						; size = 4
_eol$1$ = 12						; size = 4
_buf$ = 12						; size = 4
_str$1$ = 16						; size = 4
_len$ = 16						; size = 4
_gzgets@12 PROC						; COMDAT

; 547  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	57		 push	 edi

; 548  :     unsigned left, n;
; 549  :     char *str;
; 550  :     unsigned char *eol;
; 551  :     gz_statep state;
; 552  : 
; 553  :     /* check parameters and get internal structure */
; 554  :     if (file == NULL || buf == NULL || len < 1)

  00006	8b 7d 08	 mov	 edi, DWORD PTR _file$[ebp]
  00009	85 ff		 test	 edi, edi
  0000b	0f 84 f1 00 00
	00		 je	 $LN14@gzgets
  00011	8b 5d 0c	 mov	 ebx, DWORD PTR _buf$[ebp]
  00014	85 db		 test	 ebx, ebx
  00016	0f 84 e6 00 00
	00		 je	 $LN14@gzgets
  0001c	8b 75 10	 mov	 esi, DWORD PTR _len$[ebp]
  0001f	83 fe 01	 cmp	 esi, 1
  00022	0f 8c da 00 00
	00		 jl	 $LN14@gzgets

; 556  :     state = (gz_statep)file;
; 557  : 
; 558  :     /* check that we're reading and that there's no (serious) error */
; 559  :     if (state->mode != GZ_READ ||
; 560  :         (state->err != Z_OK && state->err != Z_BUF_ERROR))

  00028	81 7f 10 4f 1c
	00 00		 cmp	 DWORD PTR [edi+16], 7247 ; 00001c4fH
  0002f	0f 85 cd 00 00
	00		 jne	 $LN14@gzgets
  00035	8b 47 5c	 mov	 eax, DWORD PTR [edi+92]
  00038	85 c0		 test	 eax, eax
  0003a	74 09		 je	 SHORT $LN13@gzgets
  0003c	83 f8 fb	 cmp	 eax, -5			; fffffffbH
  0003f	0f 85 bd 00 00
	00		 jne	 $LN14@gzgets
$LN13@gzgets:

; 561  :         return NULL;
; 562  : 
; 563  :     /* process a skip request */
; 564  :     if (state->seek) {

  00045	83 7f 58 00	 cmp	 DWORD PTR [edi+88], 0
  00049	74 20		 je	 SHORT $LN10@gzgets

; 565  :         state->seek = 0;
; 566  :         if (gz_skip(state, state->skip) == -1)

  0004b	ff 77 54	 push	 DWORD PTR [edi+84]
  0004e	8b cf		 mov	 ecx, edi
  00050	c7 47 58 00 00
	00 00		 mov	 DWORD PTR [edi+88], 0
  00057	ff 77 50	 push	 DWORD PTR [edi+80]
  0005a	e8 00 00 00 00	 call	 _gz_skip
  0005f	83 c4 08	 add	 esp, 8
  00062	83 f8 ff	 cmp	 eax, -1
  00065	0f 84 97 00 00
	00		 je	 $LN14@gzgets
$LN10@gzgets:

; 567  :             return NULL;
; 568  :     }
; 569  : 
; 570  :     /* copy output bytes up to new line or len - 1, whichever comes first --
; 571  :        append a terminating zero to the string (we don't check for a zero in
; 572  :        the contents, let the user worry about that) */
; 573  :     str = buf;
; 574  :     left = (unsigned)len - 1;

  0006b	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  0006e	89 5d 10	 mov	 DWORD PTR _str$1$[ebp], ebx
  00071	89 45 08	 mov	 DWORD PTR _left$1$[ebp], eax

; 575  :     if (left) do {

  00074	85 c0		 test	 eax, eax
  00076	0f 84 86 00 00
	00		 je	 $LN14@gzgets
  0007c	8d 64 24 00	 npad	 4
$LL8@gzgets:

; 576  :         /* assure that something is in the output buffer */
; 577  :         if (state->x.have == 0 && gz_fetch(state) == -1)

  00080	8b 37		 mov	 esi, DWORD PTR [edi]
  00082	85 f6		 test	 esi, esi
  00084	75 15		 jne	 SHORT $LN26@gzgets
  00086	8b cf		 mov	 ecx, edi
  00088	e8 00 00 00 00	 call	 _gz_fetch
  0008d	83 f8 ff	 cmp	 eax, -1
  00090	74 70		 je	 SHORT $LN14@gzgets

; 578  :             return NULL;                /* error */
; 579  :         if (state->x.have == 0) {       /* end of file */

  00092	8b 37		 mov	 esi, DWORD PTR [edi]
  00094	85 f6		 test	 esi, esi
  00096	74 52		 je	 SHORT $LN22@gzgets
  00098	8b 45 08	 mov	 eax, DWORD PTR _left$1$[ebp]
$LN26@gzgets:

; 581  :             break;                      /* return what we have */
; 582  :         }
; 583  : 
; 584  :         /* look for end-of-line in current output buffer */
; 585  :         n = state->x.have > left ? left : state->x.have;

  0009b	3b f0		 cmp	 esi, eax
  0009d	0f 47 f0	 cmova	 esi, eax

; 586  :         eol = (unsigned char *)memchr(state->x.next, '\n', n);

  000a0	56		 push	 esi
  000a1	6a 0a		 push	 10			; 0000000aH
  000a3	ff 77 04	 push	 DWORD PTR [edi+4]
  000a6	e8 00 00 00 00	 call	 _memchr
  000ab	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ae	89 45 0c	 mov	 DWORD PTR _eol$1$[ebp], eax

; 587  :         if (eol != NULL)

  000b1	85 c0		 test	 eax, eax
  000b3	74 06		 je	 SHORT $LN3@gzgets

; 588  :             n = (unsigned)(eol - state->x.next) + 1;

  000b5	8b f0		 mov	 esi, eax
  000b7	2b 77 04	 sub	 esi, DWORD PTR [edi+4]
  000ba	46		 inc	 esi
$LN3@gzgets:

; 589  : 
; 590  :         /* copy through end-of-line, or remainder if not found */
; 591  :         memcpy(buf, state->x.next, n);

  000bb	56		 push	 esi
  000bc	ff 77 04	 push	 DWORD PTR [edi+4]
  000bf	53		 push	 ebx
  000c0	e8 00 00 00 00	 call	 _memcpy

; 592  :         state->x.have -= n;

  000c5	29 37		 sub	 DWORD PTR [edi], esi
  000c7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 593  :         state->x.next += n;

  000ca	01 77 04	 add	 DWORD PTR [edi+4], esi

; 594  :         state->x.pos += n;

  000cd	01 77 08	 add	 DWORD PTR [edi+8], esi

; 595  :         left -= n;

  000d0	8b 45 08	 mov	 eax, DWORD PTR _left$1$[ebp]
  000d3	83 57 0c 00	 adc	 DWORD PTR [edi+12], 0
  000d7	2b c6		 sub	 eax, esi

; 596  :         buf += n;

  000d9	03 de		 add	 ebx, esi
  000db	89 45 08	 mov	 DWORD PTR _left$1$[ebp], eax

; 597  :     } while (left && eol == NULL);

  000de	85 c0		 test	 eax, eax
  000e0	74 0f		 je	 SHORT $LN2@gzgets
  000e2	83 7d 0c 00	 cmp	 DWORD PTR _eol$1$[ebp], 0
  000e6	74 98		 je	 SHORT $LL8@gzgets
  000e8	eb 07		 jmp	 SHORT $LN2@gzgets
$LN22@gzgets:

; 580  :             state->past = 1;            /* read past end */

  000ea	c7 47 44 01 00
	00 00		 mov	 DWORD PTR [edi+68], 1
$LN2@gzgets:

; 598  : 
; 599  :     /* return terminated string, or if nothing, end of file */
; 600  :     if (buf == str)

  000f1	8b 45 10	 mov	 eax, DWORD PTR _str$1$[ebp]
  000f4	3b d8		 cmp	 ebx, eax
  000f6	74 0a		 je	 SHORT $LN14@gzgets

; 601  :         return NULL;
; 602  :     buf[0] = 0;

  000f8	5f		 pop	 edi
  000f9	5e		 pop	 esi
  000fa	c6 03 00	 mov	 BYTE PTR [ebx], 0
  000fd	5b		 pop	 ebx

; 603  :     return str;
; 604  : }

  000fe	5d		 pop	 ebp
  000ff	c2 0c 00	 ret	 12			; 0000000cH
$LN14@gzgets:
  00102	5f		 pop	 edi
  00103	5e		 pop	 esi

; 555  :         return NULL;

  00104	33 c0		 xor	 eax, eax
  00106	5b		 pop	 ebx

; 603  :     return str;
; 604  : }

  00107	5d		 pop	 ebp
  00108	c2 0c 00	 ret	 12			; 0000000cH
_gzgets@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\git\image2geometry\3rdparty\zlib-1.2.11\gzread.c
;	COMDAT _gzdirect@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzdirect@4 PROC					; COMDAT

; 609  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 610  :     gz_statep state;
; 611  : 
; 612  :     /* get internal structure */
; 613  :     if (file == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 07		 jne	 SHORT $LN2@gzdirect

; 614  :         return 0;

  0000b	33 c0		 xor	 eax, eax
  0000d	5e		 pop	 esi

; 624  : }

  0000e	5d		 pop	 ebp
  0000f	c2 04 00	 ret	 4
$LN2@gzdirect:

; 615  :     state = (gz_statep)file;
; 616  : 
; 617  :     /* if the state is not known, but we can find out, then do so (this is
; 618  :        mainly for right after a gzopen() or gzdopen()) */
; 619  :     if (state->mode == GZ_READ && state->how == LOOK && state->x.have == 0)

  00012	81 7e 10 4f 1c
	00 00		 cmp	 DWORD PTR [esi+16], 7247 ; 00001c4fH
  00019	75 12		 jne	 SHORT $LN1@gzdirect
  0001b	83 7e 30 00	 cmp	 DWORD PTR [esi+48], 0
  0001f	75 0c		 jne	 SHORT $LN1@gzdirect
  00021	83 3e 00	 cmp	 DWORD PTR [esi], 0
  00024	75 07		 jne	 SHORT $LN1@gzdirect

; 620  :         (void)gz_look(state);

  00026	8b ce		 mov	 ecx, esi
  00028	e8 00 00 00 00	 call	 _gz_look
$LN1@gzdirect:

; 621  : 
; 622  :     /* return 1 if transparent, 0 if processing a gzip stream */
; 623  :     return state->direct;

  0002d	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00030	5e		 pop	 esi

; 624  : }

  00031	5d		 pop	 ebp
  00032	c2 04 00	 ret	 4
_gzdirect@4 ENDP
_TEXT	ENDS
END
