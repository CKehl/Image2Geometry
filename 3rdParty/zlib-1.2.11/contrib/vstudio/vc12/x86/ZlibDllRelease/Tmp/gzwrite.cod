; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	D:\git\Image2Geometry\3rdParty\zlib-1.2.11\gzwrite.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0CH@DEEGAHIB@internal?5error?3?5deflate?5stream?5c@ ; `string'
PUBLIC	??_C@_0CF@MLPJFDMM@requested?5length?5does?5not?5fit?5in@ ; `string'
EXTRN	__write:PROC
EXTRN	_vsnprintf:PROC
;	COMDAT ??_C@_0CF@MLPJFDMM@requested?5length?5does?5not?5fit?5in@
CONST	SEGMENT
??_C@_0CF@MLPJFDMM@requested?5length?5does?5not?5fit?5in@ DB 'requested l'
	DB	'ength does not fit in int', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@DEEGAHIB@internal?5error?3?5deflate?5stream?5c@
CONST	SEGMENT
??_C@_0CH@DEEGAHIB@internal?5error?3?5deflate?5stream?5c@ DB 'internal er'
	DB	'ror: deflate stream corrupt', 00H		; `string'
PUBLIC	_gzsetparams@12
PUBLIC	_gzflush@8
PUBLIC	_gzprintf
PUBLIC	_gzvprintf
PUBLIC	_gzputs@8
PUBLIC	_gzputc@8
PUBLIC	_gzfwrite@16
PUBLIC	_gzwrite@12
PUBLIC	_gzclose_w@4
; Function compile flags: /Ogtp
; File d:\git\image2geometry\3rdparty\zlib-1.2.11\gzwrite.c
;	COMDAT _gzclose_w@4
_TEXT	SEGMENT
_file$ = 8						; size = 4
_gzclose_w@4 PROC					; COMDAT

; 629  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 630  :     int ret = Z_OK;
; 631  :     gz_statep state;
; 632  : 
; 633  :     /* get internal structure */
; 634  :     if (file == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	57		 push	 edi
  00008	33 ff		 xor	 edi, edi
  0000a	85 f6		 test	 esi, esi
  0000c	75 0b		 jne	 SHORT $LN8@gzclose_w
$LN11@gzclose_w:
  0000e	5f		 pop	 edi

; 635  :         return Z_STREAM_ERROR;

  0000f	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00014	5e		 pop	 esi

; 665  : }

  00015	5d		 pop	 ebp
  00016	c2 04 00	 ret	 4
$LN8@gzclose_w:

; 636  :     state = (gz_statep)file;
; 637  : 
; 638  :     /* check that we're writing */
; 639  :     if (state->mode != GZ_WRITE)

  00019	81 7e 10 b1 79
	00 00		 cmp	 DWORD PTR [esi+16], 31153 ; 000079b1H
  00020	75 ec		 jne	 SHORT $LN11@gzclose_w

; 640  :         return Z_STREAM_ERROR;
; 641  : 
; 642  :     /* check for seek request */
; 643  :     if (state->seek) {

  00022	39 7e 58	 cmp	 DWORD PTR [esi+88], edi
  00025	74 1b		 je	 SHORT $LN5@gzclose_w

; 644  :         state->seek = 0;
; 645  :         if (gz_zero(state, state->skip) == -1)

  00027	ff 76 54	 push	 DWORD PTR [esi+84]
  0002a	8b ce		 mov	 ecx, esi
  0002c	89 7e 58	 mov	 DWORD PTR [esi+88], edi
  0002f	ff 76 50	 push	 DWORD PTR [esi+80]
  00032	e8 00 00 00 00	 call	 _gz_zero
  00037	83 c4 08	 add	 esp, 8
  0003a	83 f8 ff	 cmp	 eax, -1
  0003d	75 03		 jne	 SHORT $LN5@gzclose_w

; 646  :             ret = state->err;

  0003f	8b 7e 5c	 mov	 edi, DWORD PTR [esi+92]
$LN5@gzclose_w:

; 647  :     }
; 648  : 
; 649  :     /* flush, free memory, and close file */
; 650  :     if (gz_comp(state, Z_FINISH) == -1)

  00042	ba 04 00 00 00	 mov	 edx, 4
  00047	8b ce		 mov	 ecx, esi
  00049	e8 00 00 00 00	 call	 _gz_comp
  0004e	83 f8 ff	 cmp	 eax, -1
  00051	75 03		 jne	 SHORT $LN4@gzclose_w

; 651  :         ret = state->err;

  00053	8b 7e 5c	 mov	 edi, DWORD PTR [esi+92]
$LN4@gzclose_w:

; 652  :     if (state->size) {

  00056	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  0005a	74 25		 je	 SHORT $LN3@gzclose_w

; 653  :         if (!state->direct) {

  0005c	83 7e 2c 00	 cmp	 DWORD PTR [esi+44], 0
  00060	75 14		 jne	 SHORT $LN2@gzclose_w

; 654  :             (void)deflateEnd(&(state->strm));

  00062	8d 46 64	 lea	 eax, DWORD PTR [esi+100]
  00065	50		 push	 eax
  00066	e8 00 00 00 00	 call	 _deflateEnd@4

; 655  :             free(state->out);

  0006b	ff 76 28	 push	 DWORD PTR [esi+40]
  0006e	e8 00 00 00 00	 call	 _free
  00073	83 c4 04	 add	 esp, 4
$LN2@gzclose_w:

; 656  :         }
; 657  :         free(state->in);

  00076	ff 76 24	 push	 DWORD PTR [esi+36]
  00079	e8 00 00 00 00	 call	 _free
  0007e	83 c4 04	 add	 esp, 4
$LN3@gzclose_w:

; 658  :     }
; 659  :     gz_error(state, Z_OK, NULL);

  00081	6a 00		 push	 0
  00083	33 d2		 xor	 edx, edx
  00085	8b ce		 mov	 ecx, esi
  00087	e8 00 00 00 00	 call	 _gz_error

; 660  :     free(state->path);

  0008c	ff 76 18	 push	 DWORD PTR [esi+24]
  0008f	e8 00 00 00 00	 call	 _free

; 661  :     if (close(state->fd) == -1)

  00094	ff 76 14	 push	 DWORD PTR [esi+20]
  00097	e8 00 00 00 00	 call	 __close
  0009c	83 c9 ff	 or	 ecx, -1
  0009f	3b c1		 cmp	 eax, ecx

; 662  :         ret = Z_ERRNO;
; 663  :     free(state);

  000a1	56		 push	 esi
  000a2	0f 44 f9	 cmove	 edi, ecx
  000a5	e8 00 00 00 00	 call	 _free
  000aa	83 c4 10	 add	 esp, 16			; 00000010H

; 664  :     return ret;

  000ad	8b c7		 mov	 eax, edi
  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi

; 665  : }

  000b1	5d		 pop	 ebp
  000b2	c2 04 00	 ret	 4
_gzclose_w@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\git\image2geometry\3rdparty\zlib-1.2.11\gzwrite.c
;	COMDAT _gz_init
_TEXT	SEGMENT
_gz_init PROC						; COMDAT
; _state$ = ecx

; 19   : {

  00000	53		 push	 ebx
  00001	56		 push	 esi
  00002	8b f1		 mov	 esi, ecx
  00004	57		 push	 edi

; 20   :     int ret;
; 21   :     z_streamp strm = &(state->strm);
; 22   : 
; 23   :     /* allocate input buffer (double size for gzprintf) */
; 24   :     state->in = (unsigned char *)malloc(state->want << 1);

  00005	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  00008	8d 7e 64	 lea	 edi, DWORD PTR [esi+100]
  0000b	03 c0		 add	 eax, eax
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 _malloc
  00013	8b d8		 mov	 ebx, eax
  00015	83 c4 04	 add	 esp, 4
  00018	89 5e 24	 mov	 DWORD PTR [esi+36], ebx

; 25   :     if (state->in == NULL) {

  0001b	85 db		 test	 ebx, ebx
  0001d	75 19		 jne	 SHORT $LN5@gz_init

; 26   :         gz_error(state, Z_MEM_ERROR, "out of memory");

  0001f	68 00 00 00 00	 push	 OFFSET ??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@
  00024	8d 50 fc	 lea	 edx, DWORD PTR [eax-4]
  00027	8b ce		 mov	 ecx, esi
  00029	e8 00 00 00 00	 call	 _gz_error
  0002e	83 c4 04	 add	 esp, 4

; 27   :         return -1;

  00031	83 c8 ff	 or	 eax, -1
  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx

; 65   : }

  00037	c3		 ret	 0
$LN5@gz_init:

; 28   :     }
; 29   : 
; 30   :     /* only need output buffer and deflate state if compressing */
; 31   :     if (!state->direct) {

  00038	83 7e 2c 00	 cmp	 DWORD PTR [esi+44], 0
  0003c	0f 85 96 00 00
	00		 jne	 $LN4@gz_init

; 32   :         /* allocate output buffer */
; 33   :         state->out = (unsigned char *)malloc(state->want);

  00042	ff 76 20	 push	 DWORD PTR [esi+32]
  00045	e8 00 00 00 00	 call	 _malloc
  0004a	83 c4 04	 add	 esp, 4
  0004d	89 46 28	 mov	 DWORD PTR [esi+40], eax

; 34   :         if (state->out == NULL) {

  00050	85 c0		 test	 eax, eax
  00052	75 21		 jne	 SHORT $LN3@gz_init

; 35   :             free(state->in);

  00054	53		 push	 ebx
  00055	e8 00 00 00 00	 call	 _free

; 36   :             gz_error(state, Z_MEM_ERROR, "out of memory");

  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@
  0005f	ba fc ff ff ff	 mov	 edx, -4			; fffffffcH
  00064	8b ce		 mov	 ecx, esi
  00066	e8 00 00 00 00	 call	 _gz_error
  0006b	83 c4 08	 add	 esp, 8

; 37   :             return -1;

  0006e	83 c8 ff	 or	 eax, -1
  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx

; 65   : }

  00074	c3		 ret	 0
$LN3@gz_init:

; 38   :         }
; 39   : 
; 40   :         /* allocate deflate memory, set up for gzip compression */
; 41   :         strm->zalloc = Z_NULL;
; 42   :         strm->zfree = Z_NULL;
; 43   :         strm->opaque = Z_NULL;
; 44   :         ret = deflateInit2(strm, state->level, Z_DEFLATED,
; 45   :                            MAX_WBITS + 16, DEF_MEM_LEVEL, state->strategy);

  00075	6a 38		 push	 56			; 00000038H
  00077	68 00 00 00 00	 push	 OFFSET ??_C@_06CJNJFBNP@1?42?411?$AA@
  0007c	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], 0
  00083	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], 0
  0008a	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0
  00091	ff 76 4c	 push	 DWORD PTR [esi+76]
  00094	6a 08		 push	 8
  00096	6a 1f		 push	 31			; 0000001fH
  00098	6a 08		 push	 8
  0009a	ff 76 48	 push	 DWORD PTR [esi+72]
  0009d	57		 push	 edi
  0009e	e8 00 00 00 00	 call	 _deflateInit2_@32

; 46   :         if (ret != Z_OK) {

  000a3	85 c0		 test	 eax, eax
  000a5	74 2b		 je	 SHORT $LN2@gz_init

; 47   :             free(state->out);

  000a7	ff 76 28	 push	 DWORD PTR [esi+40]
  000aa	e8 00 00 00 00	 call	 _free

; 48   :             free(state->in);

  000af	ff 76 24	 push	 DWORD PTR [esi+36]
  000b2	e8 00 00 00 00	 call	 _free

; 49   :             gz_error(state, Z_MEM_ERROR, "out of memory");

  000b7	68 00 00 00 00	 push	 OFFSET ??_C@_0O@BNNCBLEN@out?5of?5memory?$AA@
  000bc	ba fc ff ff ff	 mov	 edx, -4			; fffffffcH
  000c1	8b ce		 mov	 ecx, esi
  000c3	e8 00 00 00 00	 call	 _gz_error
  000c8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 50   :             return -1;

  000cb	83 c8 ff	 or	 eax, -1
  000ce	5f		 pop	 edi
  000cf	5e		 pop	 esi
  000d0	5b		 pop	 ebx

; 65   : }

  000d1	c3		 ret	 0
$LN2@gz_init:

; 51   :         }
; 52   :         strm->next_in = NULL;

  000d2	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], 0
$LN4@gz_init:

; 53   :     }
; 54   : 
; 55   :     /* mark state as initialized */
; 56   :     state->size = state->want;
; 57   : 
; 58   :     /* initialize write buffer if compressing */
; 59   :     if (!state->direct) {

  000d8	83 7e 2c 00	 cmp	 DWORD PTR [esi+44], 0
  000dc	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  000df	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  000e2	75 0c		 jne	 SHORT $LN1@gz_init

; 60   :         strm->avail_out = state->size;

  000e4	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 61   :         strm->next_out = state->out;

  000e7	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  000ea	89 47 0c	 mov	 DWORD PTR [edi+12], eax

; 62   :         state->x.next = strm->next_out;

  000ed	89 46 04	 mov	 DWORD PTR [esi+4], eax
$LN1@gz_init:

; 63   :     }
; 64   :     return 0;

  000f0	5f		 pop	 edi
  000f1	5e		 pop	 esi
  000f2	33 c0		 xor	 eax, eax
  000f4	5b		 pop	 ebx

; 65   : }

  000f5	c3		 ret	 0
_gz_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\git\image2geometry\3rdparty\zlib-1.2.11\gzwrite.c
;	COMDAT _gz_comp
_TEXT	SEGMENT
_flush$1$ = -4						; size = 4
_gz_comp PROC						; COMDAT
; _state$ = ecx
; _flush$ = edx

; 76   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx
  00009	8b da		 mov	 ebx, edx
  0000b	89 5d fc	 mov	 DWORD PTR _flush$1$[ebp], ebx

; 77   :     int ret, writ;
; 78   :     unsigned have, put, max = ((unsigned)-1 >> 2) + 1;
; 79   :     z_streamp strm = &(state->strm);
; 80   : 
; 81   :     /* allocate memory if this is the first time through */
; 82   :     if (state->size == 0 && gz_init(state) == -1)

  0000e	83 7f 1c 00	 cmp	 DWORD PTR [edi+28], 0
  00012	8d 77 64	 lea	 esi, DWORD PTR [edi+100]
  00015	75 0e		 jne	 SHORT $LN17@gz_comp
  00017	e8 00 00 00 00	 call	 _gz_init
  0001c	83 f8 ff	 cmp	 eax, -1
  0001f	0f 84 23 01 00
	00		 je	 $LN39@gz_comp
$LN17@gz_comp:

; 83   :         return -1;
; 84   : 
; 85   :     /* write directly if requested */
; 86   :     if (state->direct) {

  00025	83 7f 2c 00	 cmp	 DWORD PTR [edi+44], 0
  00029	74 6a		 je	 SHORT $LN16@gz_comp

; 87   :         while (strm->avail_in) {

  0002b	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  0002f	0f 84 f6 00 00
	00		 je	 $LN14@gz_comp
  00035	bb 00 00 00 40	 mov	 ebx, 1073741824		; 40000000H
  0003a	8d 9b 00 00 00
	00		 npad	 6
$LL15@gz_comp:

; 88   :             put = strm->avail_in > max ? max : strm->avail_in;

  00040	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00043	3d 00 00 00 40	 cmp	 eax, 1073741824		; 40000000H
  00048	0f 47 c3	 cmova	 eax, ebx

; 89   :             writ = write(state->fd, strm->next_in, put);

  0004b	50		 push	 eax
  0004c	ff 36		 push	 DWORD PTR [esi]
  0004e	ff 77 14	 push	 DWORD PTR [edi+20]
  00051	e8 00 00 00 00	 call	 __write
  00056	83 c4 0c	 add	 esp, 12			; 0000000cH

; 90   :             if (writ < 0) {

  00059	85 c0		 test	 eax, eax
  0005b	78 14		 js	 SHORT $LN27@gz_comp

; 92   :                 return -1;
; 93   :             }
; 94   :             strm->avail_in -= (unsigned)writ;

  0005d	29 46 04	 sub	 DWORD PTR [esi+4], eax

; 95   :             strm->next_in += writ;

  00060	01 06		 add	 DWORD PTR [esi], eax
  00062	83 7e 04 00	 cmp	 DWORD PTR [esi+4], 0
  00066	75 d8		 jne	 SHORT $LL15@gz_comp

; 138  : 
; 139  :     /* all done, no errors */
; 140  :     return 0;

  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	33 c0		 xor	 eax, eax
  0006c	5b		 pop	 ebx

; 141  : }

  0006d	8b e5		 mov	 esp, ebp
  0006f	5d		 pop	 ebp
  00070	c3		 ret	 0
$LN27@gz_comp:

; 91   :                 gz_error(state, Z_ERRNO, zstrerror());

  00071	e8 00 00 00 00	 call	 __errno
  00076	ff 30		 push	 DWORD PTR [eax]
  00078	e8 00 00 00 00	 call	 _strerror
  0007d	50		 push	 eax
  0007e	83 ca ff	 or	 edx, -1
  00081	8b cf		 mov	 ecx, edi
  00083	e8 00 00 00 00	 call	 _gz_error
  00088	83 c4 08	 add	 esp, 8

; 130  :             return -1;

  0008b	83 c8 ff	 or	 eax, -1
  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx

; 141  : }

  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
$LN16@gz_comp:

; 96   :         }
; 97   :         return 0;
; 98   :     }
; 99   : 
; 100  :     /* run deflate() on provided input until it produces no more output */
; 101  :     ret = Z_OK;

  00095	33 c0		 xor	 eax, eax
$LN40@gz_comp:

; 102  :     do {
; 103  :         /* write out current buffer contents if full, or if flushing, but if
; 104  :            doing Z_FINISH then don't write until we get to Z_STREAM_END */
; 105  :         if (strm->avail_out == 0 || (flush != Z_NO_FLUSH &&
; 106  :             (flush != Z_FINISH || ret == Z_STREAM_END))) {

  00097	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  0009b	ba 00 00 00 40	 mov	 edx, 1073741824		; 40000000H
  000a0	74 0e		 je	 SHORT $LN26@gz_comp
  000a2	85 db		 test	 ebx, ebx
  000a4	74 5b		 je	 SHORT $LN3@gz_comp
  000a6	83 fb 04	 cmp	 ebx, 4
  000a9	75 05		 jne	 SHORT $LN26@gz_comp
  000ab	83 f8 01	 cmp	 eax, 1
  000ae	75 51		 jne	 SHORT $LN3@gz_comp
$LN26@gz_comp:

; 107  :             while (strm->next_out > state->x.next) {

  000b0	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000b3	3b 47 04	 cmp	 eax, DWORD PTR [edi+4]
  000b6	76 31		 jbe	 SHORT $LN5@gz_comp
$LL6@gz_comp:

; 108  :                 put = strm->next_out - state->x.next > (int)max ? max :
; 109  :                       (unsigned)(strm->next_out - state->x.next);

  000b8	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000bb	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000be	2b c1		 sub	 eax, ecx
  000c0	3d 00 00 00 40	 cmp	 eax, 1073741824		; 40000000H
  000c5	0f 4f c2	 cmovg	 eax, edx

; 110  :                 writ = write(state->fd, state->x.next, put);

  000c8	50		 push	 eax
  000c9	51		 push	 ecx
  000ca	ff 77 14	 push	 DWORD PTR [edi+20]
  000cd	e8 00 00 00 00	 call	 __write
  000d2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 111  :                 if (writ < 0) {

  000d5	85 c0		 test	 eax, eax
  000d7	78 98		 js	 SHORT $LN27@gz_comp

; 112  :                     gz_error(state, Z_ERRNO, zstrerror());
; 113  :                     return -1;
; 114  :                 }
; 115  :                 state->x.next += writ;

  000d9	01 47 04	 add	 DWORD PTR [edi+4], eax
  000dc	ba 00 00 00 40	 mov	 edx, 1073741824		; 40000000H
  000e1	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  000e4	39 46 0c	 cmp	 DWORD PTR [esi+12], eax
  000e7	77 cf		 ja	 SHORT $LL6@gz_comp
$LN5@gz_comp:

; 116  :             }
; 117  :             if (strm->avail_out == 0) {

  000e9	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  000ed	75 12		 jne	 SHORT $LN3@gz_comp

; 118  :                 strm->avail_out = state->size;

  000ef	8b 47 1c	 mov	 eax, DWORD PTR [edi+28]
  000f2	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 119  :                 strm->next_out = state->out;

  000f5	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  000f8	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 120  :                 state->x.next = state->out;

  000fb	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  000fe	89 47 04	 mov	 DWORD PTR [edi+4], eax
$LN3@gz_comp:

; 121  :             }
; 122  :         }
; 123  : 
; 124  :         /* compress */
; 125  :         have = strm->avail_out;
; 126  :         ret = deflate(strm, flush);

  00101	ff 75 fc	 push	 DWORD PTR _flush$1$[ebp]
  00104	8b 5e 10	 mov	 ebx, DWORD PTR [esi+16]
  00107	56		 push	 esi
  00108	e8 00 00 00 00	 call	 _deflate@8

; 127  :         if (ret == Z_STREAM_ERROR) {

  0010d	83 f8 fe	 cmp	 eax, -2			; fffffffeH
  00110	74 22		 je	 SHORT $LN30@gz_comp

; 131  :         }
; 132  :         have -= strm->avail_out;

  00112	2b 5e 10	 sub	 ebx, DWORD PTR [esi+16]

; 133  :     } while (have);

  00115	74 08		 je	 SHORT $LN29@gz_comp
  00117	8b 5d fc	 mov	 ebx, DWORD PTR _flush$1$[ebp]
  0011a	e9 78 ff ff ff	 jmp	 $LN40@gz_comp
$LN29@gz_comp:

; 134  : 
; 135  :     /* if that completed a deflate stream, allow another to start */
; 136  :     if (flush == Z_FINISH)

  0011f	83 7d fc 04	 cmp	 DWORD PTR _flush$1$[ebp], 4
  00123	75 06		 jne	 SHORT $LN14@gz_comp

; 137  :         deflateReset(strm);

  00125	56		 push	 esi
  00126	e8 00 00 00 00	 call	 _deflateReset@4
$LN14@gz_comp:

; 138  : 
; 139  :     /* all done, no errors */
; 140  :     return 0;

  0012b	5f		 pop	 edi
  0012c	5e		 pop	 esi
  0012d	33 c0		 xor	 eax, eax
  0012f	5b		 pop	 ebx

; 141  : }

  00130	8b e5		 mov	 esp, ebp
  00132	5d		 pop	 ebp
  00133	c3		 ret	 0
$LN30@gz_comp:

; 128  :             gz_error(state, Z_STREAM_ERROR,
; 129  :                       "internal error: deflate stream corrupt");

  00134	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@DEEGAHIB@internal?5error?3?5deflate?5stream?5c@
  00139	ba fe ff ff ff	 mov	 edx, -2			; fffffffeH
  0013e	8b cf		 mov	 ecx, edi
  00140	e8 00 00 00 00	 call	 _gz_error
  00145	83 c4 04	 add	 esp, 4
$LN39@gz_comp:

; 130  :             return -1;

  00148	5f		 pop	 edi
  00149	5e		 pop	 esi
  0014a	83 c8 ff	 or	 eax, -1
  0014d	5b		 pop	 ebx

; 141  : }

  0014e	8b e5		 mov	 esp, ebp
  00150	5d		 pop	 ebp
  00151	c3		 ret	 0
_gz_comp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\git\image2geometry\3rdparty\zlib-1.2.11\gzwrite.c
;	COMDAT _gz_zero
_TEXT	SEGMENT
_first$1$ = -8						; size = 4
_len$2$ = -4						; size = 4
_len$ = 8						; size = 8
_gz_zero PROC						; COMDAT
; _state$ = ecx

; 148  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi
  00007	8b f1		 mov	 esi, ecx

; 149  :     int first;
; 150  :     unsigned n;
; 151  :     z_streamp strm = &(state->strm);
; 152  : 
; 153  :     /* consume whatever's left in the input buffer */
; 154  :     if (strm->avail_in && gz_comp(state, Z_NO_FLUSH) == -1)

  00009	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  0000d	74 13		 je	 SHORT $LN5@gz_zero
  0000f	33 d2		 xor	 edx, edx
  00011	e8 00 00 00 00	 call	 _gz_comp
  00016	83 f8 ff	 cmp	 eax, -1
  00019	75 07		 jne	 SHORT $LN5@gz_zero

; 155  :         return -1;

  0001b	0b c0		 or	 eax, eax
  0001d	5e		 pop	 esi

; 174  : }

  0001e	8b e5		 mov	 esp, ebp
  00020	5d		 pop	 ebp
  00021	c3		 ret	 0
$LN5@gz_zero:

; 156  : 
; 157  :     /* compress len zeros (len guaranteed > 0) */
; 158  :     first = 1;
; 159  :     while (len) {

  00022	8b 4d 0c	 mov	 ecx, DWORD PTR _len$[ebp+4]
  00025	ba 01 00 00 00	 mov	 edx, 1
  0002a	53		 push	 ebx
  0002b	8b 5d 08	 mov	 ebx, DWORD PTR _len$[ebp]
  0002e	8b c3		 mov	 eax, ebx
  00030	0b c1		 or	 eax, ecx
  00032	89 55 f8	 mov	 DWORD PTR _first$1$[ebp], edx
  00035	57		 push	 edi
  00036	89 4d fc	 mov	 DWORD PTR _len$2$[ebp], ecx
  00039	74 61		 je	 SHORT $LN3@gz_zero
  0003b	eb 03 8d 49 00	 npad	 5
$LL4@gz_zero:

; 160  :         n = GT_OFF(state->size) || (z_off64_t)state->size > len ?
; 161  :             (unsigned)len : state->size;

  00040	8b 7e 1c	 mov	 edi, DWORD PTR [esi+28]
  00043	33 c0		 xor	 eax, eax
  00045	3b c1		 cmp	 eax, ecx
  00047	7f 06		 jg	 SHORT $LN8@gz_zero
  00049	7c 06		 jl	 SHORT $LN9@gz_zero
  0004b	3b fb		 cmp	 edi, ebx
  0004d	76 02		 jbe	 SHORT $LN9@gz_zero
$LN8@gz_zero:
  0004f	8b fb		 mov	 edi, ebx
$LN9@gz_zero:

; 162  :         if (first) {

  00051	85 d2		 test	 edx, edx
  00053	74 15		 je	 SHORT $LN2@gz_zero

; 163  :             memset(state->in, 0, n);

  00055	57		 push	 edi
  00056	6a 00		 push	 0
  00058	ff 76 24	 push	 DWORD PTR [esi+36]
  0005b	e8 00 00 00 00	 call	 _memset
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH

; 164  :             first = 0;

  00063	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _first$1$[ebp], 0
$LN2@gz_zero:

; 165  :         }
; 166  :         strm->avail_in = n;

  0006a	89 7e 68	 mov	 DWORD PTR [esi+104], edi

; 167  :         strm->next_in = state->in;
; 168  :         state->x.pos += n;
; 169  :         if (gz_comp(state, Z_NO_FLUSH) == -1)

  0006d	8b ce		 mov	 ecx, esi
  0006f	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00072	89 46 64	 mov	 DWORD PTR [esi+100], eax
  00075	01 7e 08	 add	 DWORD PTR [esi+8], edi
  00078	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0
  0007c	33 d2		 xor	 edx, edx
  0007e	e8 00 00 00 00	 call	 _gz_comp
  00083	83 f8 ff	 cmp	 eax, -1
  00086	74 1d		 je	 SHORT $LN11@gz_zero

; 171  :         len -= n;

  00088	8b 4d fc	 mov	 ecx, DWORD PTR _len$2$[ebp]
  0008b	2b df		 sub	 ebx, edi
  0008d	8b 55 f8	 mov	 edx, DWORD PTR _first$1$[ebp]
  00090	8b c3		 mov	 eax, ebx
  00092	83 d9 00	 sbb	 ecx, 0
  00095	0b c1		 or	 eax, ecx
  00097	89 4d fc	 mov	 DWORD PTR _len$2$[ebp], ecx
  0009a	75 a4		 jne	 SHORT $LL4@gz_zero
$LN3@gz_zero:
  0009c	5f		 pop	 edi
  0009d	5b		 pop	 ebx

; 172  :     }
; 173  :     return 0;

  0009e	33 c0		 xor	 eax, eax
  000a0	5e		 pop	 esi

; 174  : }

  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
$LN11@gz_zero:
  000a5	5f		 pop	 edi
  000a6	5b		 pop	 ebx

; 170  :             return -1;

  000a7	83 c8 ff	 or	 eax, -1
  000aa	5e		 pop	 esi

; 174  : }

  000ab	8b e5		 mov	 esp, ebp
  000ad	5d		 pop	 ebp
  000ae	c3		 ret	 0
_gz_zero ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\git\image2geometry\3rdparty\zlib-1.2.11\gzwrite.c
;	COMDAT _gz_write
_TEXT	SEGMENT
_buf$1$ = -4						; size = 4
_put$1$ = 8						; size = 4
_len$ = 8						; size = 4
_gz_write PROC						; COMDAT
; _state$ = ecx
; _buf$ = edx

; 182  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 183  :     z_size_t put = len;

  00005	8b 5d 08	 mov	 ebx, DWORD PTR _len$[ebp]
  00008	89 5d 08	 mov	 DWORD PTR _put$1$[ebp], ebx
  0000b	56		 push	 esi
  0000c	8b f1		 mov	 esi, ecx
  0000e	57		 push	 edi
  0000f	8b fa		 mov	 edi, edx
  00011	89 7d fc	 mov	 DWORD PTR _buf$1$[ebp], edi

; 184  : 
; 185  :     /* if len is zero, avoid unnecessary operations */
; 186  :     if (len == 0)

  00014	85 db		 test	 ebx, ebx
  00016	0f 84 84 00 00
	00		 je	 $LN25@gz_write

; 187  :         return 0;
; 188  : 
; 189  :     /* allocate memory if this is the first time through */
; 190  :     if (state->size == 0 && gz_init(state) == -1)

  0001c	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  00020	75 0a		 jne	 SHORT $LN17@gz_write
  00022	e8 00 00 00 00	 call	 _gz_init
  00027	83 f8 ff	 cmp	 eax, -1
  0002a	74 74		 je	 SHORT $LN25@gz_write
$LN17@gz_write:

; 191  :         return 0;
; 192  : 
; 193  :     /* check for seek request */
; 194  :     if (state->seek) {

  0002c	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  00030	74 1c		 je	 SHORT $LN15@gz_write

; 195  :         state->seek = 0;
; 196  :         if (gz_zero(state, state->skip) == -1)

  00032	ff 76 54	 push	 DWORD PTR [esi+84]
  00035	8b ce		 mov	 ecx, esi
  00037	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  0003e	ff 76 50	 push	 DWORD PTR [esi+80]
  00041	e8 00 00 00 00	 call	 _gz_zero
  00046	83 c4 08	 add	 esp, 8
  00049	83 f8 ff	 cmp	 eax, -1
  0004c	74 52		 je	 SHORT $LN25@gz_write
$LN15@gz_write:

; 197  :             return 0;
; 198  :     }
; 199  : 
; 200  :     /* for small len, copy to input buffer, otherwise compress directly */
; 201  :     if (len < state->size) {

  0004e	3b 5e 1c	 cmp	 ebx, DWORD PTR [esi+28]
  00051	73 56		 jae	 SHORT $LN14@gz_write
$LL13@gz_write:

; 202  :         /* copy to input buffer, compress when full */
; 203  :         do {
; 204  :             unsigned have, copy;
; 205  : 
; 206  :             if (state->strm.avail_in == 0)

  00053	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]
  00056	85 c9		 test	 ecx, ecx
  00058	75 06		 jne	 SHORT $LN10@gz_write

; 207  :                 state->strm.next_in = state->in;

  0005a	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  0005d	89 46 64	 mov	 DWORD PTR [esi+100], eax
$LN10@gz_write:

; 208  :             have = (unsigned)((state->strm.next_in + state->strm.avail_in) -
; 209  :                               state->in);

  00060	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00063	2b c8		 sub	 ecx, eax
  00065	03 4e 64	 add	 ecx, DWORD PTR [esi+100]

; 210  :             copy = state->size - have;

  00068	8b 7e 1c	 mov	 edi, DWORD PTR [esi+28]
  0006b	2b f9		 sub	 edi, ecx

; 211  :             if (copy > len)

  0006d	3b fb		 cmp	 edi, ebx
  0006f	0f 47 fb	 cmova	 edi, ebx

; 212  :                 copy = len;
; 213  :             memcpy(state->in + have, buf, copy);

  00072	03 c1		 add	 eax, ecx
  00074	57		 push	 edi
  00075	ff 75 fc	 push	 DWORD PTR _buf$1$[ebp]
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 _memcpy

; 214  :             state->strm.avail_in += copy;

  0007e	01 7e 68	 add	 DWORD PTR [esi+104], edi
  00081	83 c4 0c	 add	 esp, 12			; 0000000cH

; 215  :             state->x.pos += copy;

  00084	01 7e 08	 add	 DWORD PTR [esi+8], edi
  00087	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0

; 216  :             buf = (const char *)buf + copy;

  0008b	01 7d fc	 add	 DWORD PTR _buf$1$[ebp], edi

; 217  :             len -= copy;

  0008e	2b df		 sub	 ebx, edi

; 218  :             if (len && gz_comp(state, Z_NO_FLUSH) == -1)

  00090	74 53		 je	 SHORT $LN3@gz_write
  00092	33 d2		 xor	 edx, edx
  00094	8b ce		 mov	 ecx, esi
  00096	e8 00 00 00 00	 call	 _gz_comp
  0009b	83 f8 ff	 cmp	 eax, -1
  0009e	75 b3		 jne	 SHORT $LL13@gz_write
$LN25@gz_write:
  000a0	5f		 pop	 edi
  000a1	5e		 pop	 esi

; 236  :                 return 0;

  000a2	33 c0		 xor	 eax, eax
  000a4	5b		 pop	 ebx

; 243  : }

  000a5	8b e5		 mov	 esp, ebp
  000a7	5d		 pop	 ebp
  000a8	c3		 ret	 0
$LN14@gz_write:

; 219  :                 return 0;
; 220  :         } while (len);
; 221  :     }
; 222  :     else {
; 223  :         /* consume whatever's left in the input buffer */
; 224  :         if (state->strm.avail_in && gz_comp(state, Z_NO_FLUSH) == -1)

  000a9	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  000ad	74 0e		 je	 SHORT $LN6@gz_write
  000af	33 d2		 xor	 edx, edx
  000b1	8b ce		 mov	 ecx, esi
  000b3	e8 00 00 00 00	 call	 _gz_comp
  000b8	83 f8 ff	 cmp	 eax, -1
  000bb	74 e3		 je	 SHORT $LN25@gz_write
$LN6@gz_write:

; 225  :             return 0;
; 226  : 
; 227  :         /* directly compress user buffer to file */
; 228  :         state->strm.next_in = (z_const Bytef *)buf;

  000bd	89 7e 64	 mov	 DWORD PTR [esi+100], edi
$LL5@gz_write:

; 229  :         do {
; 230  :             unsigned n = (unsigned)-1;

  000c0	83 cf ff	 or	 edi, -1

; 231  :             if (n > len)
; 232  :                 n = len;
; 233  :             state->strm.avail_in = n;
; 234  :             state->x.pos += n;
; 235  :             if (gz_comp(state, Z_NO_FLUSH) == -1)

  000c3	8b ce		 mov	 ecx, esi
  000c5	83 fb ff	 cmp	 ebx, -1
  000c8	0f 42 fb	 cmovb	 edi, ebx
  000cb	01 7e 08	 add	 DWORD PTR [esi+8], edi
  000ce	89 7e 68	 mov	 DWORD PTR [esi+104], edi
  000d1	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0
  000d5	33 d2		 xor	 edx, edx
  000d7	e8 00 00 00 00	 call	 _gz_comp
  000dc	83 f8 ff	 cmp	 eax, -1
  000df	74 bf		 je	 SHORT $LN25@gz_write

; 237  :             len -= n;

  000e1	2b df		 sub	 ebx, edi

; 238  :         } while (len);

  000e3	75 db		 jne	 SHORT $LL5@gz_write
$LN3@gz_write:

; 239  :     }
; 240  : 
; 241  :     /* input was all buffered or compressed */
; 242  :     return put;

  000e5	8b 45 08	 mov	 eax, DWORD PTR _put$1$[ebp]
  000e8	5f		 pop	 edi
  000e9	5e		 pop	 esi
  000ea	5b		 pop	 ebx

; 243  : }

  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c3		 ret	 0
_gz_write ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\git\image2geometry\3rdparty\zlib-1.2.11\gzwrite.c
;	COMDAT _gzwrite@12
_TEXT	SEGMENT
_file$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_gzwrite@12 PROC					; COMDAT

; 250  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 251  :     gz_statep state;
; 252  : 
; 253  :     /* get internal structure */
; 254  :     if (file == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 28		 je	 SHORT $LN2@gzwrite

; 255  :         return 0;
; 256  :     state = (gz_statep)file;
; 257  : 
; 258  :     /* check that we're writing and that there's no error */
; 259  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  0000a	81 79 10 b1 79
	00 00		 cmp	 DWORD PTR [ecx+16], 31153 ; 000079b1H
  00011	75 1f		 jne	 SHORT $LN2@gzwrite
  00013	83 79 5c 00	 cmp	 DWORD PTR [ecx+92], 0
  00017	75 19		 jne	 SHORT $LN2@gzwrite

; 261  : 
; 262  :     /* since an int is returned, make sure len fits in one, otherwise return
; 263  :        with an error (this avoids a flaw in the interface) */
; 264  :     if ((int)len < 0) {

  00019	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  0001c	85 c0		 test	 eax, eax
  0001e	79 18		 jns	 SHORT $LN1@gzwrite

; 265  :         gz_error(state, Z_DATA_ERROR, "requested length does not fit in int");

  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@MLPJFDMM@requested?5length?5does?5not?5fit?5in@
  00025	ba fd ff ff ff	 mov	 edx, -3			; fffffffdH
  0002a	e8 00 00 00 00	 call	 _gz_error
  0002f	83 c4 04	 add	 esp, 4
$LN2@gzwrite:

; 260  :         return 0;

  00032	33 c0		 xor	 eax, eax

; 271  : }

  00034	5d		 pop	 ebp
  00035	c2 0c 00	 ret	 12			; 0000000cH
$LN1@gzwrite:

; 266  :         return 0;
; 267  :     }
; 268  : 
; 269  :     /* write len bytes from buf (the return value will fit in an int) */
; 270  :     return (int)gz_write(state, buf, len);

  00038	8b 55 0c	 mov	 edx, DWORD PTR _buf$[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 _gz_write
  00041	83 c4 04	 add	 esp, 4

; 271  : }

  00044	5d		 pop	 ebp
  00045	c2 0c 00	 ret	 12			; 0000000cH
_gzwrite@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\git\image2geometry\3rdparty\zlib-1.2.11\gzwrite.c
;	COMDAT _gzfwrite@16
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_size$ = 12						; size = 4
_nitems$ = 16						; size = 4
_file$ = 20						; size = 4
_gzfwrite@16 PROC					; COMDAT

; 279  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 280  :     z_size_t len;
; 281  :     gz_statep state;
; 282  : 
; 283  :     /* get internal structure */
; 284  :     if (file == NULL)

  00003	8b 4d 14	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	75 06		 jne	 SHORT $LN4@gzfwrite
$LN2@gzfwrite:

; 285  :         return 0;

  0000a	33 c0		 xor	 eax, eax

; 301  : }

  0000c	5d		 pop	 ebp
  0000d	c2 10 00	 ret	 16			; 00000010H
$LN4@gzfwrite:

; 286  :     state = (gz_statep)file;
; 287  : 
; 288  :     /* check that we're writing and that there's no error */
; 289  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  00010	81 79 10 b1 79
	00 00		 cmp	 DWORD PTR [ecx+16], 31153 ; 000079b1H
  00017	75 f1		 jne	 SHORT $LN2@gzfwrite
  00019	83 79 5c 00	 cmp	 DWORD PTR [ecx+92], 0
  0001d	75 eb		 jne	 SHORT $LN2@gzfwrite

; 290  :         return 0;
; 291  : 
; 292  :     /* compute bytes to read -- error on overflow */
; 293  :     len = nitems * size;

  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	8b 7d 0c	 mov	 edi, DWORD PTR _size$[ebp]
  00024	8b f7		 mov	 esi, edi
  00026	0f af 75 10	 imul	 esi, DWORD PTR _nitems$[ebp]

; 294  :     if (size && len / size != nitems) {

  0002a	85 ff		 test	 edi, edi
  0002c	74 25		 je	 SHORT $LN1@gzfwrite
  0002e	33 d2		 xor	 edx, edx
  00030	8b c6		 mov	 eax, esi
  00032	f7 f7		 div	 edi
  00034	3b 45 10	 cmp	 eax, DWORD PTR _nitems$[ebp]
  00037	74 1a		 je	 SHORT $LN1@gzfwrite

; 295  :         gz_error(state, Z_STREAM_ERROR, "request does not fit in a size_t");

  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@EGGJDMIK@request?5does?5not?5fit?5in?5a?5size_t@
  0003e	ba fe ff ff ff	 mov	 edx, -2			; fffffffeH
  00043	e8 00 00 00 00	 call	 _gz_error
  00048	83 c4 04	 add	 esp, 4
$LN7@gzfwrite:

; 296  :         return 0;

  0004b	5f		 pop	 edi
  0004c	33 c0		 xor	 eax, eax
  0004e	5e		 pop	 esi

; 301  : }

  0004f	5d		 pop	 ebp
  00050	c2 10 00	 ret	 16			; 00000010H
$LN1@gzfwrite:

; 297  :     }
; 298  : 
; 299  :     /* write len bytes to buf, return the number of full items written */
; 300  :     return len ? gz_write(state, buf, len) / size : 0;

  00053	85 f6		 test	 esi, esi
  00055	74 f4		 je	 SHORT $LN7@gzfwrite
  00057	8b 55 08	 mov	 edx, DWORD PTR _buf$[ebp]
  0005a	56		 push	 esi
  0005b	e8 00 00 00 00	 call	 _gz_write
  00060	83 c4 04	 add	 esp, 4
  00063	33 d2		 xor	 edx, edx
  00065	f7 f7		 div	 edi
  00067	5f		 pop	 edi
  00068	5e		 pop	 esi

; 301  : }

  00069	5d		 pop	 ebp
  0006a	c2 10 00	 ret	 16			; 00000010H
_gzfwrite@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\git\image2geometry\3rdparty\zlib-1.2.11\gzwrite.c
;	COMDAT _gzputc@8
_TEXT	SEGMENT
_file$ = 8						; size = 4
_buf$ = 11						; size = 1
_c$ = 12						; size = 4
_gzputc@8 PROC						; COMDAT

; 307  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 308  :     unsigned have;
; 309  :     unsigned char buf[1];
; 310  :     gz_statep state;
; 311  :     z_streamp strm;
; 312  : 
; 313  :     /* get internal structure */
; 314  :     if (file == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 08		 jne	 SHORT $LN9@gzputc
$LN14@gzputc:

; 315  :         return -1;

  0000b	83 c8 ff	 or	 eax, -1
  0000e	5e		 pop	 esi

; 349  : }

  0000f	5d		 pop	 ebp
  00010	c2 08 00	 ret	 8
$LN9@gzputc:

; 316  :     state = (gz_statep)file;
; 317  :     strm = &(state->strm);
; 318  : 
; 319  :     /* check that we're writing and that there's no error */
; 320  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  00013	81 7e 10 b1 79
	00 00		 cmp	 DWORD PTR [esi+16], 31153 ; 000079b1H
  0001a	75 ef		 jne	 SHORT $LN14@gzputc
  0001c	83 7e 5c 00	 cmp	 DWORD PTR [esi+92], 0
  00020	75 e9		 jne	 SHORT $LN14@gzputc

; 321  :         return -1;
; 322  : 
; 323  :     /* check for seek request */
; 324  :     if (state->seek) {

  00022	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  00026	74 1c		 je	 SHORT $LN5@gzputc

; 325  :         state->seek = 0;
; 326  :         if (gz_zero(state, state->skip) == -1)

  00028	ff 76 54	 push	 DWORD PTR [esi+84]
  0002b	8b ce		 mov	 ecx, esi
  0002d	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  00034	ff 76 50	 push	 DWORD PTR [esi+80]
  00037	e8 00 00 00 00	 call	 _gz_zero
  0003c	83 c4 08	 add	 esp, 8
  0003f	83 f8 ff	 cmp	 eax, -1
  00042	74 c7		 je	 SHORT $LN14@gzputc
$LN5@gzputc:

; 327  :             return -1;
; 328  :     }
; 329  : 
; 330  :     /* try writing to input buffer for speed (state->size == 0 if buffer not
; 331  :        initialized) */
; 332  :     if (state->size) {

  00044	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  00048	57		 push	 edi
  00049	74 36		 je	 SHORT $LN2@gzputc

; 333  :         if (strm->avail_in == 0)

  0004b	8b 56 68	 mov	 edx, DWORD PTR [esi+104]
  0004e	85 d2		 test	 edx, edx
  00050	75 06		 jne	 SHORT $LN3@gzputc

; 334  :             strm->next_in = state->in;

  00052	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00055	89 46 64	 mov	 DWORD PTR [esi+100], eax
$LN3@gzputc:

; 335  :         have = (unsigned)((strm->next_in + strm->avail_in) - state->in);

  00058	8b 4e 64	 mov	 ecx, DWORD PTR [esi+100]
  0005b	8b 7e 24	 mov	 edi, DWORD PTR [esi+36]
  0005e	2b cf		 sub	 ecx, edi
  00060	03 ca		 add	 ecx, edx

; 336  :         if (have < state->size) {

  00062	3b 4e 1c	 cmp	 ecx, DWORD PTR [esi+28]
  00065	73 1a		 jae	 SHORT $LN2@gzputc

; 337  :             state->in[have] = (unsigned char)c;

  00067	8b 45 0c	 mov	 eax, DWORD PTR _c$[ebp]
  0006a	88 04 0f	 mov	 BYTE PTR [edi+ecx], al

; 338  :             strm->avail_in++;

  0006d	ff 46 68	 inc	 DWORD PTR [esi+104]

; 339  :             state->x.pos++;

  00070	83 46 08 01	 add	 DWORD PTR [esi+8], 1
  00074	5f		 pop	 edi
  00075	83 56 0c 00	 adc	 DWORD PTR [esi+12], 0

; 340  :             return c & 0xff;

  00079	0f b6 c0	 movzx	 eax, al
  0007c	5e		 pop	 esi

; 349  : }

  0007d	5d		 pop	 ebp
  0007e	c2 08 00	 ret	 8
$LN2@gzputc:
  00081	53		 push	 ebx

; 341  :         }
; 342  :     }
; 343  : 
; 344  :     /* no room in buffer or not initialized, use gz_write() */
; 345  :     buf[0] = (unsigned char)c;

  00082	8b 5d 0c	 mov	 ebx, DWORD PTR _c$[ebp]

; 346  :     if (gz_write(state, buf, 1) != 1)

  00085	8d 55 0b	 lea	 edx, DWORD PTR _buf$[ebp]
  00088	6a 01		 push	 1
  0008a	8b ce		 mov	 ecx, esi
  0008c	88 5d 0b	 mov	 BYTE PTR _buf$[ebp], bl
  0008f	e8 00 00 00 00	 call	 _gz_write
  00094	83 c4 04	 add	 esp, 4
  00097	83 f8 01	 cmp	 eax, 1
  0009a	74 0a		 je	 SHORT $LN1@gzputc

; 347  :         return -1;

  0009c	5b		 pop	 ebx
  0009d	5f		 pop	 edi
  0009e	83 c8 ff	 or	 eax, -1
  000a1	5e		 pop	 esi

; 349  : }

  000a2	5d		 pop	 ebp
  000a3	c2 08 00	 ret	 8
$LN1@gzputc:

; 348  :     return c & 0xff;

  000a6	0f b6 c3	 movzx	 eax, bl
  000a9	5b		 pop	 ebx
  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi

; 349  : }

  000ac	5d		 pop	 ebp
  000ad	c2 08 00	 ret	 8
_gzputc@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\git\image2geometry\3rdparty\zlib-1.2.11\gzwrite.c
;	COMDAT _gzputs@8
_TEXT	SEGMENT
_file$ = 8						; size = 4
_str$ = 12						; size = 4
_gzputs@8 PROC						; COMDAT

; 355  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 356  :     int ret;
; 357  :     z_size_t len;
; 358  :     gz_statep state;
; 359  : 
; 360  :     /* get internal structure */
; 361  :     if (file == NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _file$[ebp]
  00006	85 c9		 test	 ecx, ecx
  00008	74 3c		 je	 SHORT $LN1@gzputs

; 362  :         return -1;
; 363  :     state = (gz_statep)file;
; 364  : 
; 365  :     /* check that we're writing and that there's no error */
; 366  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  0000a	81 79 10 b1 79
	00 00		 cmp	 DWORD PTR [ecx+16], 31153 ; 000079b1H
  00011	75 33		 jne	 SHORT $LN1@gzputs
  00013	83 79 5c 00	 cmp	 DWORD PTR [ecx+92], 0
  00017	75 2d		 jne	 SHORT $LN1@gzputs

; 368  : 
; 369  :     /* write string */
; 370  :     len = strlen(str);

  00019	8b 55 0c	 mov	 edx, DWORD PTR _str$[ebp]
  0001c	56		 push	 esi
  0001d	8b f2		 mov	 esi, edx
  0001f	57		 push	 edi
  00020	8d 7e 01	 lea	 edi, DWORD PTR [esi+1]
$LL8@gzputs:
  00023	8a 06		 mov	 al, BYTE PTR [esi]
  00025	46		 inc	 esi
  00026	84 c0		 test	 al, al
  00028	75 f9		 jne	 SHORT $LL8@gzputs
  0002a	2b f7		 sub	 esi, edi

; 371  :     ret = gz_write(state, str, len);

  0002c	56		 push	 esi
  0002d	e8 00 00 00 00	 call	 _gz_write
  00032	83 c4 04	 add	 esp, 4

; 372  :     return ret == 0 && len != 0 ? -1 : ret;

  00035	85 c0		 test	 eax, eax
  00037	75 07		 jne	 SHORT $LN6@gzputs
  00039	85 f6		 test	 esi, esi
  0003b	74 03		 je	 SHORT $LN6@gzputs
  0003d	83 c8 ff	 or	 eax, -1
$LN6@gzputs:
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi

; 373  : }

  00042	5d		 pop	 ebp
  00043	c2 08 00	 ret	 8
$LN1@gzputs:

; 367  :         return -1;

  00046	83 c8 ff	 or	 eax, -1

; 373  : }

  00049	5d		 pop	 ebp
  0004a	c2 08 00	 ret	 8
_gzputs@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\git\image2geometry\3rdparty\zlib-1.2.11\gzwrite.c
;	COMDAT _gzvprintf
_TEXT	SEGMENT
_file$ = 8						; size = 4
_format$ = 12						; size = 4
_va$ = 16						; size = 4
_gzvprintf PROC						; COMDAT

; 380  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 381  :     int len;
; 382  :     unsigned left;
; 383  :     char *next;
; 384  :     gz_statep state;
; 385  :     z_streamp strm;
; 386  : 
; 387  :     /* get internal structure */
; 388  :     if (file == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 08		 jne	 SHORT $LN11@gzvprintf
$LN9@gzvprintf:

; 389  :         return Z_STREAM_ERROR;

  0000b	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00010	5e		 pop	 esi

; 449  : }

  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
$LN11@gzvprintf:

; 390  :     state = (gz_statep)file;
; 391  :     strm = &(state->strm);
; 392  : 
; 393  :     /* check that we're writing and that there's no error */
; 394  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  00013	81 7e 10 b1 79
	00 00		 cmp	 DWORD PTR [esi+16], 31153 ; 000079b1H
  0001a	75 ef		 jne	 SHORT $LN9@gzvprintf
  0001c	83 7e 5c 00	 cmp	 DWORD PTR [esi+92], 0
  00020	75 e9		 jne	 SHORT $LN9@gzvprintf

; 395  :         return Z_STREAM_ERROR;
; 396  : 
; 397  :     /* make sure we have some buffer space */
; 398  :     if (state->size == 0 && gz_init(state) == -1)

  00022	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  00026	75 12		 jne	 SHORT $LN8@gzvprintf
  00028	8b ce		 mov	 ecx, esi
  0002a	e8 00 00 00 00	 call	 _gz_init
  0002f	83 f8 ff	 cmp	 eax, -1
  00032	75 06		 jne	 SHORT $LN8@gzvprintf
$LN16@gzvprintf:

; 399  :         return state->err;

  00034	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00037	5e		 pop	 esi

; 449  : }

  00038	5d		 pop	 ebp
  00039	c3		 ret	 0
$LN8@gzvprintf:

; 400  : 
; 401  :     /* check for seek request */
; 402  :     if (state->seek) {

  0003a	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  0003e	74 1c		 je	 SHORT $LN6@gzvprintf

; 403  :         state->seek = 0;
; 404  :         if (gz_zero(state, state->skip) == -1)

  00040	ff 76 54	 push	 DWORD PTR [esi+84]
  00043	8b ce		 mov	 ecx, esi
  00045	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  0004c	ff 76 50	 push	 DWORD PTR [esi+80]
  0004f	e8 00 00 00 00	 call	 _gz_zero
  00054	83 c4 08	 add	 esp, 8
  00057	83 f8 ff	 cmp	 eax, -1
  0005a	74 d8		 je	 SHORT $LN16@gzvprintf
$LN6@gzvprintf:

; 405  :             return state->err;
; 406  :     }
; 407  : 
; 408  :     /* do the printf() into the input buffer, put length in len -- the input
; 409  :        buffer is double-sized just for this function, so there is guaranteed to
; 410  :        be state->size bytes available after the current contents */
; 411  :     if (strm->avail_in == 0)

  0005c	8b 4e 68	 mov	 ecx, DWORD PTR [esi+104]
  0005f	85 c9		 test	 ecx, ecx
  00061	75 06		 jne	 SHORT $LN5@gzvprintf

; 412  :         strm->next_in = state->in;

  00063	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00066	89 46 64	 mov	 DWORD PTR [esi+100], eax
$LN5@gzvprintf:

; 413  :     next = (char *)(state->in + (strm->next_in - state->in) + strm->avail_in);
; 414  :     next[state->size - 1] = 0;

  00069	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0006c	53		 push	 ebx
  0006d	8b 5e 64	 mov	 ebx, DWORD PTR [esi+100]
  00070	57		 push	 edi

; 415  : #ifdef NO_vsnprintf
; 416  : #  ifdef HAS_vsprintf_void
; 417  :     (void)vsprintf(next, format, va);
; 418  :     for (len = 0; len < state->size; len++)
; 419  :         if (next[len] == 0) break;
; 420  : #  else
; 421  :     len = vsprintf(next, format, va);
; 422  : #  endif
; 423  : #else
; 424  : #  ifdef HAS_vsnprintf_void
; 425  :     (void)vsnprintf(next, state->size, format, va);
; 426  :     len = strlen(next);
; 427  : #  else
; 428  :     len = vsnprintf(next, state->size, format, va);

  00071	ff 75 10	 push	 DWORD PTR _va$[ebp]
  00074	03 d9		 add	 ebx, ecx
  00076	ff 75 0c	 push	 DWORD PTR _format$[ebp]
  00079	c6 44 03 ff 00	 mov	 BYTE PTR [ebx+eax-1], 0
  0007e	ff 76 1c	 push	 DWORD PTR [esi+28]
  00081	53		 push	 ebx
  00082	e8 00 00 00 00	 call	 _vsnprintf
  00087	8b f8		 mov	 edi, eax
  00089	83 c4 10	 add	 esp, 16			; 00000010H

; 429  : #  endif
; 430  : #endif
; 431  : 
; 432  :     /* check that printf() results fit in buffer */
; 433  :     if (len == 0 || (unsigned)len >= state->size || next[state->size - 1] != 0)

  0008c	85 ff		 test	 edi, edi
  0008e	74 62		 je	 SHORT $LN3@gzvprintf
  00090	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00093	3b f8		 cmp	 edi, eax
  00095	73 5b		 jae	 SHORT $LN3@gzvprintf
  00097	80 7c 18 ff 00	 cmp	 BYTE PTR [eax+ebx-1], 0
  0009c	75 54		 jne	 SHORT $LN3@gzvprintf

; 435  : 
; 436  :     /* update buffer and position, compress first half if past that */
; 437  :     strm->avail_in += (unsigned)len;

  0009e	01 7e 68	 add	 DWORD PTR [esi+104], edi

; 438  :     state->x.pos += len;

  000a1	8b c7		 mov	 eax, edi
  000a3	99		 cdq
  000a4	01 46 08	 add	 DWORD PTR [esi+8], eax

; 439  :     if (strm->avail_in >= state->size) {

  000a7	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000aa	11 56 0c	 adc	 DWORD PTR [esi+12], edx
  000ad	8b 5e 68	 mov	 ebx, DWORD PTR [esi+104]
  000b0	3b d8		 cmp	 ebx, eax
  000b2	72 37		 jb	 SHORT $LN2@gzvprintf

; 440  :         left = strm->avail_in - state->size;
; 441  :         strm->avail_in = state->size;
; 442  :         if (gz_comp(state, Z_NO_FLUSH) == -1)

  000b4	33 d2		 xor	 edx, edx
  000b6	89 46 68	 mov	 DWORD PTR [esi+104], eax
  000b9	8b ce		 mov	 ecx, esi
  000bb	2b d8		 sub	 ebx, eax
  000bd	e8 00 00 00 00	 call	 _gz_comp
  000c2	83 f8 ff	 cmp	 eax, -1
  000c5	75 08		 jne	 SHORT $LN1@gzvprintf

; 443  :             return state->err;

  000c7	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  000ca	5f		 pop	 edi
  000cb	5b		 pop	 ebx
  000cc	5e		 pop	 esi

; 449  : }

  000cd	5d		 pop	 ebp
  000ce	c3		 ret	 0
$LN1@gzvprintf:

; 444  :         memcpy(state->in, state->in + state->size, left);

  000cf	8b 4e 24	 mov	 ecx, DWORD PTR [esi+36]
  000d2	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  000d5	53		 push	 ebx
  000d6	03 c1		 add	 eax, ecx
  000d8	50		 push	 eax
  000d9	51		 push	 ecx
  000da	e8 00 00 00 00	 call	 _memcpy

; 445  :         strm->next_in = state->in;

  000df	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  000e2	83 c4 0c	 add	 esp, 12			; 0000000cH
  000e5	89 46 64	 mov	 DWORD PTR [esi+100], eax

; 446  :         strm->avail_in = left;

  000e8	89 5e 68	 mov	 DWORD PTR [esi+104], ebx
$LN2@gzvprintf:

; 447  :     }
; 448  :     return len;

  000eb	8b c7		 mov	 eax, edi
  000ed	5f		 pop	 edi
  000ee	5b		 pop	 ebx
  000ef	5e		 pop	 esi

; 449  : }

  000f0	5d		 pop	 ebp
  000f1	c3		 ret	 0
$LN3@gzvprintf:
  000f2	5f		 pop	 edi
  000f3	5b		 pop	 ebx

; 434  :         return 0;

  000f4	33 c0		 xor	 eax, eax
  000f6	5e		 pop	 esi

; 449  : }

  000f7	5d		 pop	 ebp
  000f8	c3		 ret	 0
_gzvprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\git\image2geometry\3rdparty\zlib-1.2.11\gzwrite.c
;	COMDAT _gzprintf
_TEXT	SEGMENT
_file$ = 8						; size = 4
_format$ = 12						; size = 4
_gzprintf PROC						; COMDAT

; 452  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 453  :     va_list va;
; 454  :     int ret;
; 455  : 
; 456  :     va_start(va, format);
; 457  :     ret = gzvprintf(file, format, va);

  00003	8d 45 10	 lea	 eax, DWORD PTR _format$[ebp+4]
  00006	50		 push	 eax
  00007	ff 75 0c	 push	 DWORD PTR _format$[ebp]
  0000a	ff 75 08	 push	 DWORD PTR _file$[ebp]
  0000d	e8 00 00 00 00	 call	 _gzvprintf
  00012	83 c4 0c	 add	 esp, 12			; 0000000cH

; 458  :     va_end(va);
; 459  :     return ret;
; 460  : }

  00015	5d		 pop	 ebp
  00016	c3		 ret	 0
_gzprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\git\image2geometry\3rdparty\zlib-1.2.11\gzwrite.c
;	COMDAT _gzflush@8
_TEXT	SEGMENT
_file$ = 8						; size = 4
_flush$ = 12						; size = 4
_gzflush@8 PROC						; COMDAT

; 556  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 557  :     gz_statep state;
; 558  : 
; 559  :     /* get internal structure */
; 560  :     if (file == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 49		 je	 SHORT $LN5@gzflush

; 561  :         return Z_STREAM_ERROR;
; 562  :     state = (gz_statep)file;
; 563  : 
; 564  :     /* check that we're writing and that there's no error */
; 565  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  0000b	81 7e 10 b1 79
	00 00		 cmp	 DWORD PTR [esi+16], 31153 ; 000079b1H
  00012	75 40		 jne	 SHORT $LN5@gzflush
  00014	83 7e 5c 00	 cmp	 DWORD PTR [esi+92], 0
  00018	75 3a		 jne	 SHORT $LN5@gzflush

; 567  : 
; 568  :     /* check flush parameter */
; 569  :     if (flush < 0 || flush > Z_FINISH)

  0001a	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  0001e	77 34		 ja	 SHORT $LN5@gzflush

; 570  :         return Z_STREAM_ERROR;
; 571  : 
; 572  :     /* check for seek request */
; 573  :     if (state->seek) {

  00020	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  00024	74 1c		 je	 SHORT $LN1@gzflush

; 574  :         state->seek = 0;
; 575  :         if (gz_zero(state, state->skip) == -1)

  00026	ff 76 54	 push	 DWORD PTR [esi+84]
  00029	8b ce		 mov	 ecx, esi
  0002b	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  00032	ff 76 50	 push	 DWORD PTR [esi+80]
  00035	e8 00 00 00 00	 call	 _gz_zero
  0003a	83 c4 08	 add	 esp, 8
  0003d	83 f8 ff	 cmp	 eax, -1
  00040	74 0a		 je	 SHORT $LN10@gzflush
$LN1@gzflush:

; 576  :             return state->err;
; 577  :     }
; 578  : 
; 579  :     /* compress remaining data with requested flush */
; 580  :     (void)gz_comp(state, flush);

  00042	8b 55 0c	 mov	 edx, DWORD PTR _flush$[ebp]
  00045	8b ce		 mov	 ecx, esi
  00047	e8 00 00 00 00	 call	 _gz_comp
$LN10@gzflush:

; 581  :     return state->err;

  0004c	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  0004f	5e		 pop	 esi

; 582  : }

  00050	5d		 pop	 ebp
  00051	c2 08 00	 ret	 8
$LN5@gzflush:

; 566  :         return Z_STREAM_ERROR;

  00054	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00059	5e		 pop	 esi

; 582  : }

  0005a	5d		 pop	 ebp
  0005b	c2 08 00	 ret	 8
_gzflush@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\git\image2geometry\3rdparty\zlib-1.2.11\gzwrite.c
;	COMDAT _gzsetparams@12
_TEXT	SEGMENT
_file$ = 8						; size = 4
_level$ = 12						; size = 4
_strategy$ = 16						; size = 4
_gzsetparams@12 PROC					; COMDAT

; 589  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 590  :     gz_statep state;
; 591  :     z_streamp strm;
; 592  : 
; 593  :     /* get internal structure */
; 594  :     if (file == NULL)

  00004	8b 75 08	 mov	 esi, DWORD PTR _file$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	75 0a		 jne	 SHORT $LN8@gzsetparam
$LN6@gzsetparam:

; 595  :         return Z_STREAM_ERROR;

  0000b	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00010	5e		 pop	 esi

; 624  : }

  00011	5d		 pop	 ebp
  00012	c2 0c 00	 ret	 12			; 0000000cH
$LN8@gzsetparam:

; 596  :     state = (gz_statep)file;
; 597  :     strm = &(state->strm);
; 598  : 
; 599  :     /* check that we're writing and that there's no error */
; 600  :     if (state->mode != GZ_WRITE || state->err != Z_OK)

  00015	81 7e 10 b1 79
	00 00		 cmp	 DWORD PTR [esi+16], 31153 ; 000079b1H
  0001c	8d 46 64	 lea	 eax, DWORD PTR [esi+100]
  0001f	75 ea		 jne	 SHORT $LN6@gzsetparam
  00021	83 7e 5c 00	 cmp	 DWORD PTR [esi+92], 0
  00025	75 e4		 jne	 SHORT $LN6@gzsetparam

; 601  :         return Z_STREAM_ERROR;
; 602  : 
; 603  :     /* if no change is requested, then do nothing */
; 604  :     if (level == state->level && strategy == state->strategy)

  00027	53		 push	 ebx
  00028	8b 5d 0c	 mov	 ebx, DWORD PTR _level$[ebp]
  0002b	57		 push	 edi
  0002c	8b 7d 10	 mov	 edi, DWORD PTR _strategy$[ebp]
  0002f	3b 5e 48	 cmp	 ebx, DWORD PTR [esi+72]
  00032	75 05		 jne	 SHORT $LN5@gzsetparam
  00034	3b 7e 4c	 cmp	 edi, DWORD PTR [esi+76]
  00037	74 5d		 je	 SHORT $LN15@gzsetparam
$LN5@gzsetparam:

; 605  :         return Z_OK;
; 606  : 
; 607  :     /* check for seek request */
; 608  :     if (state->seek) {

  00039	83 7e 58 00	 cmp	 DWORD PTR [esi+88], 0
  0003d	74 1f		 je	 SHORT $LN3@gzsetparam

; 609  :         state->seek = 0;
; 610  :         if (gz_zero(state, state->skip) == -1)

  0003f	ff 76 54	 push	 DWORD PTR [esi+84]
  00042	8b ce		 mov	 ecx, esi
  00044	c7 46 58 00 00
	00 00		 mov	 DWORD PTR [esi+88], 0
  0004b	ff 76 50	 push	 DWORD PTR [esi+80]
  0004e	e8 00 00 00 00	 call	 _gz_zero
  00053	83 c4 08	 add	 esp, 8
  00056	83 f8 ff	 cmp	 eax, -1
  00059	74 20		 je	 SHORT $LN16@gzsetparam
  0005b	8d 46 64	 lea	 eax, DWORD PTR [esi+100]
$LN3@gzsetparam:

; 611  :             return state->err;
; 612  :     }
; 613  : 
; 614  :     /* change compression parameters for subsequent input */
; 615  :     if (state->size) {

  0005e	83 7e 1c 00	 cmp	 DWORD PTR [esi+28], 0
  00062	74 2c		 je	 SHORT $LN2@gzsetparam

; 616  :         /* flush previous input with previous parameters before changing */
; 617  :         if (strm->avail_in && gz_comp(state, Z_BLOCK) == -1)

  00064	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00068	74 1e		 je	 SHORT $LN1@gzsetparam
  0006a	ba 05 00 00 00	 mov	 edx, 5
  0006f	8b ce		 mov	 ecx, esi
  00071	e8 00 00 00 00	 call	 _gz_comp
  00076	83 f8 ff	 cmp	 eax, -1
  00079	75 0a		 jne	 SHORT $LN11@gzsetparam
$LN16@gzsetparam:

; 618  :             return state->err;

  0007b	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  0007e	5f		 pop	 edi
  0007f	5b		 pop	 ebx
  00080	5e		 pop	 esi

; 624  : }

  00081	5d		 pop	 ebp
  00082	c2 0c 00	 ret	 12			; 0000000cH
$LN11@gzsetparam:
  00085	8d 46 64	 lea	 eax, DWORD PTR [esi+100]
$LN1@gzsetparam:

; 619  :         deflateParams(strm, level, strategy);

  00088	57		 push	 edi
  00089	53		 push	 ebx
  0008a	50		 push	 eax
  0008b	e8 00 00 00 00	 call	 _deflateParams@12
$LN2@gzsetparam:

; 620  :     }
; 621  :     state->level = level;

  00090	89 5e 48	 mov	 DWORD PTR [esi+72], ebx

; 622  :     state->strategy = strategy;

  00093	89 7e 4c	 mov	 DWORD PTR [esi+76], edi
$LN15@gzsetparam:

; 623  :     return Z_OK;

  00096	5f		 pop	 edi
  00097	5b		 pop	 ebx
  00098	33 c0		 xor	 eax, eax
  0009a	5e		 pop	 esi

; 624  : }

  0009b	5d		 pop	 ebp
  0009c	c2 0c 00	 ret	 12			; 0000000cH
_gzsetparams@12 ENDP
_TEXT	ENDS
END
