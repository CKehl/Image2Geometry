; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	D:\git\Image2Geometry\3rdParty\zlib-1.2.11\inftrees.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

	ORG $+8
?lext@?1??inflate_table@@9@9 DW 010H			; `inflate_table'::`2'::lext
	DW	010H
	DW	010H
	DW	010H
	DW	010H
	DW	010H
	DW	010H
	DW	010H
	DW	011H
	DW	011H
	DW	011H
	DW	011H
	DW	012H
	DW	012H
	DW	012H
	DW	012H
	DW	013H
	DW	013H
	DW	013H
	DW	013H
	DW	014H
	DW	014H
	DW	014H
	DW	014H
	DW	015H
	DW	015H
	DW	015H
	DW	015H
	DW	010H
	DW	04dH
	DW	0caH
	ORG $+2
?dbase@?1??inflate_table@@9@9 DW 01H			; `inflate_table'::`2'::dbase
	DW	02H
	DW	03H
	DW	04H
	DW	05H
	DW	07H
	DW	09H
	DW	0dH
	DW	011H
	DW	019H
	DW	021H
	DW	031H
	DW	041H
	DW	061H
	DW	081H
	DW	0c1H
	DW	0101H
	DW	0181H
	DW	0201H
	DW	0301H
	DW	0401H
	DW	0601H
	DW	0801H
	DW	0c01H
	DW	01001H
	DW	01801H
	DW	02001H
	DW	03001H
	DW	04001H
	DW	06001H
	DW	00H
	DW	00H
?lbase@?1??inflate_table@@9@9 DW 03H			; `inflate_table'::`2'::lbase
	DW	04H
	DW	05H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	0aH
	DW	0bH
	DW	0dH
	DW	0fH
	DW	011H
	DW	013H
	DW	017H
	DW	01bH
	DW	01fH
	DW	023H
	DW	02bH
	DW	033H
	DW	03bH
	DW	043H
	DW	053H
	DW	063H
	DW	073H
	DW	083H
	DW	0a3H
	DW	0c3H
	DW	0e3H
	DW	0102H
	DW	00H
	DW	00H
	ORG $+2
?dext@?1??inflate_table@@9@9 DW 010H			; `inflate_table'::`2'::dext
	DW	010H
	DW	010H
	DW	010H
	DW	011H
	DW	011H
	DW	012H
	DW	012H
	DW	013H
	DW	013H
	DW	014H
	DW	014H
	DW	015H
	DW	015H
	DW	016H
	DW	016H
	DW	017H
	DW	017H
	DW	018H
	DW	018H
	DW	019H
	DW	019H
	DW	01aH
	DW	01aH
	DW	01bH
	DW	01bH
	DW	01cH
	DW	01cH
	DW	01dH
	DW	01dH
	DW	040H
	DW	040H
PUBLIC	_inflate_table
; Function compile flags: /Ogtp
; File d:\git\image2geometry\3rdparty\zlib-1.2.11\inftrees.c
;	COMDAT _inflate_table
_TEXT	SEGMENT
_offs$ = -128						; size = 32
_count$ = -96						; size = 32
_min$2$ = -64						; size = 4
_mask$1$ = -60						; size = 4
tv1257 = -56						; size = 4
tv1251 = -56						; size = 4
_low$1$ = -52						; size = 4
tv1258 = -48						; size = 4
_used$1$ = -44						; size = 4
_lens$1$ = -40						; size = 4
_base$1$ = -36						; size = 4
_extra$1$ = -32						; size = 4
_match$1$ = -28						; size = 4
_root$3$ = -24						; size = 4
_len$2$ = -20						; size = 4
_type$1$ = -16						; size = 4
_huff$1$ = -12						; size = 4
_next$1$ = -8						; size = 4
_drop$1$ = -4						; size = 4
_here$ = 8						; size = 4
_codes$ = 8						; size = 4
_table$ = 12						; size = 4
_bits$ = 16						; size = 4
_work$ = 20						; size = 4
_inflate_table PROC					; COMDAT
; _type$ = ecx
; _lens$ = edx

; 39   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	89 4d f0	 mov	 DWORD PTR _type$1$[ebp], ecx
  0000e	0f 57 c0	 xorps	 xmm0, xmm0

; 40   :     unsigned len;               /* a code's length in bits */
; 41   :     unsigned sym;               /* index of code symbols */
; 42   :     unsigned min, max;          /* minimum and maximum code lengths */
; 43   :     unsigned root;              /* number of index bits for root table */
; 44   :     unsigned curr;              /* number of index bits for current table */
; 45   :     unsigned drop;              /* code bits to drop for sub-table */
; 46   :     int left;                   /* number of prefix codes available */
; 47   :     unsigned used;              /* code entries in table used */
; 48   :     unsigned huff;              /* Huffman code */
; 49   :     unsigned incr;              /* for incrementing code, index */
; 50   :     unsigned fill;              /* index for replicating entries */
; 51   :     unsigned low;               /* low bits for current root entry */
; 52   :     unsigned mask;              /* mask for low root bits */
; 53   :     code here;                  /* table entry for duplication */
; 54   :     code FAR *next;             /* next available space in table */
; 55   :     const unsigned short FAR *base;     /* base value table to use */
; 56   :     const unsigned short FAR *extra;    /* extra bits table to use */
; 57   :     unsigned match;             /* use base and extra for symbol >= match */
; 58   :     unsigned short count[MAXBITS+1];    /* number of codes of each length */
; 59   :     unsigned short offs[MAXBITS+1];     /* offsets in table for each length */
; 60   :     static const unsigned short lbase[31] = { /* Length codes 257..285 base */
; 61   :         3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
; 62   :         35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0};
; 63   :     static const unsigned short lext[31] = { /* Length codes 257..285 extra */
; 64   :         16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
; 65   :         19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 77, 202};
; 66   :     static const unsigned short dbase[32] = { /* Distance codes 0..29 base */
; 67   :         1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
; 68   :         257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
; 69   :         8193, 12289, 16385, 24577, 0, 0};
; 70   :     static const unsigned short dext[32] = { /* Distance codes 0..29 extra */
; 71   :         16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
; 72   :         23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
; 73   :         28, 28, 29, 29, 64, 64};
; 74   : 
; 75   :     /*
; 76   :        Process a set of code lengths to create a canonical Huffman code.  The
; 77   :        code lengths are lens[0..codes-1].  Each length corresponds to the
; 78   :        symbols 0..codes-1.  The Huffman code is generated by first sorting the
; 79   :        symbols by length from short to long, and retaining the symbol order
; 80   :        for codes with equal lengths.  Then the code starts with all zero bits
; 81   :        for the first code of the shortest length, and the codes are integer
; 82   :        increments for the same length, and zeros are appended as the length
; 83   :        increases.  For the deflate format, these bits are stored backwards
; 84   :        from their more natural integer increment ordering, and so when the
; 85   :        decoding tables are built in the large loop below, the integer codes
; 86   :        are incremented backwards.
; 87   : 
; 88   :        This routine assumes, but does not check, that all of the entries in
; 89   :        lens[] are in the range 0..MAXBITS.  The caller must assure this.
; 90   :        1..MAXBITS is interpreted as that code length.  zero means that that
; 91   :        symbol does not occur in this code.
; 92   : 
; 93   :        The codes are sorted by computing a count of codes for each length,
; 94   :        creating from that a table of starting indices for each length in the
; 95   :        sorted table, and then entering the symbols in order in the sorted
; 96   :        table.  The sorted table is work[], with that space being provided by
; 97   :        the caller.
; 98   : 
; 99   :        The length counts are used for other purposes as well, i.e. finding
; 100  :        the minimum and maximum length codes, determining if there are any
; 101  :        codes at all, checking for a valid set of lengths, and looking ahead
; 102  :        at length counts to determine sub-table sizes when building the
; 103  :        decoding tables.
; 104  :      */
; 105  : 
; 106  :     /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
; 107  :     for (len = 0; len <= MAXBITS; len++)
; 108  :         count[len] = 0;
; 109  :     for (sym = 0; sym < codes; sym++)

  00011	8b 4d 08	 mov	 ecx, DWORD PTR _codes$[ebp]
  00014	8b c2		 mov	 eax, edx
  00016	33 f6		 xor	 esi, esi
  00018	89 45 d8	 mov	 DWORD PTR _lens$1$[ebp], eax
  0001b	57		 push	 edi
  0001c	f3 0f 7f 45 a0	 movdqu	 XMMWORD PTR _count$[ebp], xmm0
  00021	f3 0f 7f 45 b0	 movdqu	 XMMWORD PTR _count$[ebp+16], xmm0
  00026	85 c9		 test	 ecx, ecx
  00028	74 16		 je	 SHORT $LN57@inflate_ta
  0002a	8d 9b 00 00 00
	00		 npad	 6
$LL59@inflate_ta:

; 110  :         count[lens[sym]]++;

  00030	0f b7 04 70	 movzx	 eax, WORD PTR [eax+esi*2]
  00034	46		 inc	 esi
  00035	66 ff 44 45 a0	 inc	 WORD PTR _count$[ebp+eax*2]
  0003a	8b c2		 mov	 eax, edx
  0003c	3b f1		 cmp	 esi, ecx
  0003e	72 f0		 jb	 SHORT $LL59@inflate_ta
$LN57@inflate_ta:

; 111  : 
; 112  :     /* bound code lengths, force root to be within code lengths */
; 113  :     root = *bits;

  00040	8b 5d 10	 mov	 ebx, DWORD PTR _bits$[ebp]

; 114  :     for (max = MAXBITS; max >= 1; max--)

  00043	bf 0f 00 00 00	 mov	 edi, 15			; 0000000fH
  00048	8b 03		 mov	 eax, DWORD PTR [ebx]
  0004a	8d 9b 00 00 00
	00		 npad	 6
$LL56@inflate_ta:

; 115  :         if (count[max] != 0) break;

  00050	66 83 7c 7d a0
	00		 cmp	 WORD PTR _count$[ebp+edi*2], 0
  00056	75 06		 jne	 SHORT $LN77@inflate_ta

; 114  :     for (max = MAXBITS; max >= 1; max--)

  00058	4f		 dec	 edi
  00059	83 ff 01	 cmp	 edi, 1
  0005c	73 f2		 jae	 SHORT $LL56@inflate_ta
$LN77@inflate_ta:

; 116  :     if (root > max) root = max;

  0005e	3b c7		 cmp	 eax, edi
  00060	0f 47 c7	 cmova	 eax, edi

; 117  :     if (max == 0) {                     /* no symbols to code at all */

  00063	85 ff		 test	 edi, edi
  00065	75 2a		 jne	 SHORT $LN51@inflate_ta

; 118  :         here.op = (unsigned char)64;    /* invalid code marker */
; 119  :         here.bits = (unsigned char)1;
; 120  :         here.val = (unsigned short)0;
; 121  :         *(*table)++ = here;             /* make a table to force an error */

  00067	8b 55 0c	 mov	 edx, DWORD PTR _table$[ebp]
  0006a	c7 45 08 40 01
	00 00		 mov	 DWORD PTR _here$[ebp], 320 ; 00000140H
  00071	8b 45 08	 mov	 eax, DWORD PTR _here$[ebp]
  00074	5f		 pop	 edi
  00075	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00077	5e		 pop	 esi
  00078	89 01		 mov	 DWORD PTR [ecx], eax
  0007a	83 02 04	 add	 DWORD PTR [edx], 4
  0007d	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 122  :         *(*table)++ = here;

  0007f	89 01		 mov	 DWORD PTR [ecx], eax
  00081	83 02 04	 add	 DWORD PTR [edx], 4

; 123  :         *bits = 1;
; 124  :         return 0;     /* no symbols, but wait for decoding to report error */

  00084	33 c0		 xor	 eax, eax
  00086	c7 03 01 00 00
	00		 mov	 DWORD PTR [ebx], 1
  0008c	5b		 pop	 ebx

; 304  : }

  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
$LN51@inflate_ta:

; 125  :     }
; 126  :     for (min = 1; min < max; min++)

  00091	bb 01 00 00 00	 mov	 ebx, 1
  00096	89 5d ec	 mov	 DWORD PTR _len$2$[ebp], ebx
  00099	3b fb		 cmp	 edi, ebx
  0009b	76 13		 jbe	 SHORT $LN78@inflate_ta
  0009d	8d 49 00	 npad	 3
$LL50@inflate_ta:

; 127  :         if (count[min] != 0) break;

  000a0	66 83 7c 5d a0
	00		 cmp	 WORD PTR _count$[ebp+ebx*2], 0
  000a6	75 05		 jne	 SHORT $LN129@inflate_ta

; 125  :     }
; 126  :     for (min = 1; min < max; min++)

  000a8	43		 inc	 ebx
  000a9	3b df		 cmp	 ebx, edi
  000ab	72 f3		 jb	 SHORT $LL50@inflate_ta
$LN129@inflate_ta:
  000ad	89 5d ec	 mov	 DWORD PTR _len$2$[ebp], ebx
$LN78@inflate_ta:

; 128  :     if (root < min) root = min;

  000b0	3b c3		 cmp	 eax, ebx

; 129  : 
; 130  :     /* check for an over-subscribed or incomplete set of lengths */
; 131  :     left = 1;

  000b2	ba 01 00 00 00	 mov	 edx, 1

; 132  :     for (len = 1; len <= MAXBITS; len++) {

  000b7	8b ca		 mov	 ecx, edx
  000b9	0f 42 c3	 cmovb	 eax, ebx
  000bc	89 45 e8	 mov	 DWORD PTR _root$3$[ebp], eax
  000bf	90		 npad	 1
$LL45@inflate_ta:

; 133  :         left <<= 1;
; 134  :         left -= count[len];

  000c0	0f b7 44 4d a0	 movzx	 eax, WORD PTR _count$[ebp+ecx*2]
  000c5	03 d2		 add	 edx, edx
  000c7	2b d0		 sub	 edx, eax

; 135  :         if (left < 0) return -1;        /* over-subscribed */

  000c9	0f 88 f6 02 00
	00		 js	 $LN79@inflate_ta

; 132  :     for (len = 1; len <= MAXBITS; len++) {

  000cf	41		 inc	 ecx
  000d0	83 f9 0f	 cmp	 ecx, 15			; 0000000fH
  000d3	76 eb		 jbe	 SHORT $LL45@inflate_ta

; 136  :     }
; 137  :     if (left > 0 && (type == CODES || max != 1))

  000d5	85 d2		 test	 edx, edx
  000d7	7e 13		 jle	 SHORT $LN41@inflate_ta
  000d9	83 7d f0 00	 cmp	 DWORD PTR _type$1$[ebp], 0
  000dd	0f 84 e2 02 00
	00		 je	 $LN79@inflate_ta
  000e3	83 ff 01	 cmp	 edi, 1
  000e6	0f 85 d9 02 00
	00		 jne	 $LN79@inflate_ta
$LN41@inflate_ta:

; 138  :         return -1;                      /* incomplete set */
; 139  : 
; 140  :     /* generate offsets into symbol table for each length for sorting */
; 141  :     offs[1] = 0;

  000ec	33 c0		 xor	 eax, eax

; 142  :     for (len = 1; len < MAXBITS; len++)

  000ee	b9 02 00 00 00	 mov	 ecx, 2
  000f3	66 89 45 82	 mov	 WORD PTR _offs$[ebp+2], ax
  000f7	eb 07 8d a4 24
	00 00 00 00	 npad	 9
$LL39@inflate_ta:

; 143  :         offs[len + 1] = offs[len] + count[len];

  00100	66 8b 44 0d 80	 mov	 ax, WORD PTR _offs$[ebp+ecx]
  00105	66 03 44 0d a0	 add	 ax, WORD PTR _count$[ebp+ecx]
  0010a	66 89 44 0d 82	 mov	 WORD PTR _offs$[ebp+ecx+2], ax
  0010f	83 c1 02	 add	 ecx, 2
  00112	83 f9 1e	 cmp	 ecx, 30			; 0000001eH
  00115	72 e9		 jb	 SHORT $LL39@inflate_ta

; 144  : 
; 145  :     /* sort symbols by length, by symbol order within each length */
; 146  :     for (sym = 0; sym < codes; sym++)

  00117	8b 55 08	 mov	 edx, DWORD PTR _codes$[ebp]
  0011a	33 c9		 xor	 ecx, ecx
  0011c	8b 75 14	 mov	 esi, DWORD PTR _work$[ebp]
  0011f	85 d2		 test	 edx, edx
  00121	74 26		 je	 SHORT $LN34@inflate_ta
  00123	8b 5d d8	 mov	 ebx, DWORD PTR _lens$1$[ebp]
$LL36@inflate_ta:

; 147  :         if (lens[sym] != 0) work[offs[lens[sym]]++] = (unsigned short)sym;

  00126	0f b7 04 4b	 movzx	 eax, WORD PTR [ebx+ecx*2]
  0012a	66 85 c0	 test	 ax, ax
  0012d	74 12		 je	 SHORT $LN35@inflate_ta
  0012f	0f b7 44 45 80	 movzx	 eax, WORD PTR _offs$[ebp+eax*2]
  00134	66 89 0c 46	 mov	 WORD PTR [esi+eax*2], cx
  00138	0f b7 04 4b	 movzx	 eax, WORD PTR [ebx+ecx*2]
  0013c	66 ff 44 45 80	 inc	 WORD PTR _offs$[ebp+eax*2]
$LN35@inflate_ta:

; 144  : 
; 145  :     /* sort symbols by length, by symbol order within each length */
; 146  :     for (sym = 0; sym < codes; sym++)

  00141	41		 inc	 ecx
  00142	3b ca		 cmp	 ecx, edx
  00144	72 e0		 jb	 SHORT $LL36@inflate_ta
  00146	8b 5d ec	 mov	 ebx, DWORD PTR _len$2$[ebp]
$LN34@inflate_ta:

; 148  : 
; 149  :     /*
; 150  :        Create and fill in decoding tables.  In this loop, the table being
; 151  :        filled is at next and has curr index bits.  The code being used is huff
; 152  :        with length len.  That code is converted to an index by dropping drop
; 153  :        bits off of the bottom.  For codes where len is less than drop + curr,
; 154  :        those top drop + curr - len bits are incremented through all values to
; 155  :        fill the table with replicated entries.
; 156  : 
; 157  :        root is the number of index bits for the root table.  When len exceeds
; 158  :        root, sub-tables are created pointed to by the root entry with an index
; 159  :        of the low root bits of huff.  This is saved in low to check for when a
; 160  :        new sub-table should be started.  drop is zero when the root table is
; 161  :        being filled, and drop is root when sub-tables are being filled.
; 162  : 
; 163  :        When a new sub-table is needed, it is necessary to look ahead in the
; 164  :        code lengths to determine what size sub-table is needed.  The length
; 165  :        counts are used for this, and so count[] is decremented as codes are
; 166  :        entered in the tables.
; 167  : 
; 168  :        used keeps track of how many table entries have been allocated from the
; 169  :        provided *table space.  It is checked for LENS and DIST tables against
; 170  :        the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
; 171  :        the initial root table size constants.  See the comments in inftrees.h
; 172  :        for more information.
; 173  : 
; 174  :        sym increments through all symbols, and the loop terminates when
; 175  :        all codes of length max, i.e. all codes, have been processed.  This
; 176  :        routine permits incomplete codes, so another loop after this one fills
; 177  :        in the rest of the decoding tables with invalid code markers.
; 178  :      */
; 179  : 
; 180  :     /* set up for code type */
; 181  :     switch (type) {

  00149	8b 45 f0	 mov	 eax, DWORD PTR _type$1$[ebp]
  0014c	83 e8 00	 sub	 eax, 0
  0014f	74 30		 je	 SHORT $LN30@inflate_ta
  00151	48		 dec	 eax
  00152	74 15		 je	 SHORT $LN29@inflate_ta

; 191  :     default:    /* DISTS */
; 192  :         base = dbase;
; 193  :         extra = dext;
; 194  :         match = 0;

  00154	33 c0		 xor	 eax, eax
  00156	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _base$1$[ebp], OFFSET ?dbase@?1??inflate_table@@9@9
  0015d	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _extra$1$[ebp], OFFSET ?dext@?1??inflate_table@@9@9
  00164	89 45 e4	 mov	 DWORD PTR _match$1$[ebp], eax
  00167	eb 25		 jmp	 SHORT $LN31@inflate_ta
$LN29@inflate_ta:

; 185  :         break;
; 186  :     case LENS:
; 187  :         base = lbase;
; 188  :         extra = lext;
; 189  :         match = 257;

  00169	b8 01 01 00 00	 mov	 eax, 257		; 00000101H
  0016e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _base$1$[ebp], OFFSET ?lbase@?1??inflate_table@@9@9
  00175	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _extra$1$[ebp], OFFSET ?lext@?1??inflate_table@@9@9
  0017c	89 45 e4	 mov	 DWORD PTR _match$1$[ebp], eax

; 190  :         break;

  0017f	eb 0d		 jmp	 SHORT $LN31@inflate_ta
$LN30@inflate_ta:

; 182  :     case CODES:
; 183  :         base = extra = work;    /* dummy value--not used */

  00181	89 75 e0	 mov	 DWORD PTR _extra$1$[ebp], esi
  00184	89 75 dc	 mov	 DWORD PTR _base$1$[ebp], esi

; 184  :         match = 20;

  00187	c7 45 e4 14 00
	00 00		 mov	 DWORD PTR _match$1$[ebp], 20 ; 00000014H
$LN31@inflate_ta:

; 195  :     }
; 196  : 
; 197  :     /* initialize state for loop */
; 198  :     huff = 0;                   /* starting code */
; 199  :     sym = 0;                    /* starting code symbol */
; 200  :     len = min;                  /* starting code length */
; 201  :     next = *table;              /* current table to fill in */

  0018e	8b 4d 0c	 mov	 ecx, DWORD PTR _table$[ebp]

; 202  :     curr = root;                /* current table index bits */
; 203  :     drop = 0;                   /* current bits to drop from code for index */

  00191	33 d2		 xor	 edx, edx
  00193	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _huff$1$[ebp], 0
  0019a	89 55 fc	 mov	 DWORD PTR _drop$1$[ebp], edx

; 204  :     low = (unsigned)(-1);       /* trigger new sub-table when len > root */

  0019d	c7 45 cc ff ff
	ff ff		 mov	 DWORD PTR _low$1$[ebp], -1
  001a4	8b 01		 mov	 eax, DWORD PTR [ecx]

; 205  :     used = 1U << root;          /* use root table entries */

  001a6	8b 4d e8	 mov	 ecx, DWORD PTR _root$3$[ebp]
  001a9	89 45 f8	 mov	 DWORD PTR _next$1$[ebp], eax
  001ac	b8 01 00 00 00	 mov	 eax, 1
  001b1	d3 e0		 shl	 eax, cl
  001b3	89 45 d0	 mov	 DWORD PTR tv1258[ebp], eax
  001b6	89 45 d4	 mov	 DWORD PTR _used$1$[ebp], eax

; 206  :     mask = used - 1;            /* mask for comparing low */

  001b9	8d 48 ff	 lea	 ecx, DWORD PTR [eax-1]
  001bc	89 4d c4	 mov	 DWORD PTR _mask$1$[ebp], ecx

; 207  : 
; 208  :     /* check available table space */
; 209  :     if ((type == LENS && used > ENOUGH_LENS) ||
; 210  :         (type == DISTS && used > ENOUGH_DISTS))

  001bf	8b 4d f0	 mov	 ecx, DWORD PTR _type$1$[ebp]
  001c2	83 f9 01	 cmp	 ecx, 1
  001c5	75 09		 jne	 SHORT $LN25@inflate_ta
  001c7	3d 54 03 00 00	 cmp	 eax, 852		; 00000354H
  001cc	77 0e		 ja	 SHORT $LN26@inflate_ta
  001ce	eb 20		 jmp	 SHORT $LL24@inflate_ta
$LN25@inflate_ta:
  001d0	83 f9 02	 cmp	 ecx, 2
  001d3	75 1b		 jne	 SHORT $LL24@inflate_ta
  001d5	3d 50 02 00 00	 cmp	 eax, 592		; 00000250H
  001da	76 14		 jbe	 SHORT $LL24@inflate_ta
$LN26@inflate_ta:
  001dc	5f		 pop	 edi
  001dd	5e		 pop	 esi

; 211  :         return 1;

  001de	b8 01 00 00 00	 mov	 eax, 1
  001e3	5b		 pop	 ebx

; 304  : }

  001e4	8b e5		 mov	 esp, ebp
  001e6	5d		 pop	 ebp
  001e7	c3		 ret	 0
$LL131@inflate_ta:
  001e8	8b 75 14	 mov	 esi, DWORD PTR _work$[ebp]
  001eb	eb 03 8d 49 00	 npad	 5
$LL24@inflate_ta:

; 212  : 
; 213  :     /* process all codes and make table entries */
; 214  :     for (;;) {
; 215  :         /* create table entry */
; 216  :         here.bits = (unsigned char)(len - drop);

  001f0	8a c3		 mov	 al, bl
  001f2	2a c2		 sub	 al, dl

; 217  :         if (work[sym] + 1U < match) {

  001f4	0f b7 16	 movzx	 edx, WORD PTR [esi]
  001f7	8b 75 e4	 mov	 esi, DWORD PTR _match$1$[ebp]
  001fa	8b ca		 mov	 ecx, edx
  001fc	88 45 09	 mov	 BYTE PTR _here$[ebp+1], al
  001ff	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  00202	3b c6		 cmp	 eax, esi
  00204	73 0a		 jae	 SHORT $LN22@inflate_ta

; 218  :             here.op = (unsigned char)0;

  00206	c6 45 08 00	 mov	 BYTE PTR _here$[ebp], 0

; 219  :             here.val = work[sym];

  0020a	66 89 55 0a	 mov	 WORD PTR _here$[ebp+2], dx
  0020e	eb 22		 jmp	 SHORT $LN19@inflate_ta
$LN22@inflate_ta:

; 220  :         }
; 221  :         else if (work[sym] >= match) {

  00210	3b ce		 cmp	 ecx, esi
  00212	72 14		 jb	 SHORT $LN20@inflate_ta

; 222  :             here.op = (unsigned char)(extra[work[sym] - match]);

  00214	8b 45 e0	 mov	 eax, DWORD PTR _extra$1$[ebp]
  00217	2b ce		 sub	 ecx, esi
  00219	8a 04 48	 mov	 al, BYTE PTR [eax+ecx*2]
  0021c	88 45 08	 mov	 BYTE PTR _here$[ebp], al

; 223  :             here.val = base[work[sym] - match];

  0021f	8b 45 dc	 mov	 eax, DWORD PTR _base$1$[ebp]
  00222	66 8b 04 48	 mov	 ax, WORD PTR [eax+ecx*2]

; 224  :         }
; 225  :         else {

  00226	eb 06		 jmp	 SHORT $LN137@inflate_ta
$LN20@inflate_ta:

; 226  :             here.op = (unsigned char)(32 + 64);         /* end of block */

  00228	c6 45 08 60	 mov	 BYTE PTR _here$[ebp], 96 ; 00000060H

; 227  :             here.val = 0;

  0022c	33 c0		 xor	 eax, eax
$LN137@inflate_ta:
  0022e	66 89 45 0a	 mov	 WORD PTR _here$[ebp+2], ax
$LN19@inflate_ta:

; 228  :         }
; 229  : 
; 230  :         /* replicate for those indices with low len bits equal to huff */
; 231  :         incr = 1U << (len - drop);
; 232  :         fill = 1U << curr;

  00232	8b 55 d0	 mov	 edx, DWORD PTR tv1258[ebp]
  00235	8b cb		 mov	 ecx, ebx
  00237	2b 4d fc	 sub	 ecx, DWORD PTR _drop$1$[ebp]
  0023a	be 01 00 00 00	 mov	 esi, 1
  0023f	d3 e6		 shl	 esi, cl
  00241	8b 4d fc	 mov	 ecx, DWORD PTR _drop$1$[ebp]

; 233  :         min = fill;                 /* save offset to next table */

  00244	89 55 c0	 mov	 DWORD PTR _min$2$[ebp], edx
  00247	8d 04 b5 00 00
	00 00		 lea	 eax, DWORD PTR [esi*4]
  0024e	89 45 c8	 mov	 DWORD PTR tv1251[ebp], eax
  00251	8b 45 f4	 mov	 eax, DWORD PTR _huff$1$[ebp]
  00254	d3 e8		 shr	 eax, cl
  00256	8b 4d f8	 mov	 ecx, DWORD PTR _next$1$[ebp]
  00259	03 c2		 add	 eax, edx
  0025b	8d 0c 81	 lea	 ecx, DWORD PTR [ecx+eax*4]
  0025e	8b 45 08	 mov	 eax, DWORD PTR _here$[ebp]
$LL18@inflate_ta:

; 234  :         do {
; 235  :             fill -= incr;

  00261	2b 4d c8	 sub	 ecx, DWORD PTR tv1251[ebp]

; 236  :             next[(huff >> drop) + fill] = here;

  00264	89 01		 mov	 DWORD PTR [ecx], eax
  00266	2b d6		 sub	 edx, esi

; 237  :         } while (fill != 0);

  00268	75 f7		 jne	 SHORT $LL18@inflate_ta

; 238  : 
; 239  :         /* backwards increment the len-bit code huff */
; 240  :         incr = 1U << (len - 1);

  0026a	8d 4b ff	 lea	 ecx, DWORD PTR [ebx-1]
  0026d	ba 01 00 00 00	 mov	 edx, 1
  00272	d3 e2		 shl	 edx, cl

; 241  :         while (huff & incr)

  00274	8b 4d f4	 mov	 ecx, DWORD PTR _huff$1$[ebp]
  00277	85 d1		 test	 edx, ecx
  00279	74 0b		 je	 SHORT $LN14@inflate_ta
  0027b	eb 03 8d 49 00	 npad	 5
$LL15@inflate_ta:

; 242  :             incr >>= 1;

  00280	d1 ea		 shr	 edx, 1
  00282	85 d1		 test	 edx, ecx
  00284	75 fa		 jne	 SHORT $LL15@inflate_ta
$LN14@inflate_ta:

; 243  :         if (incr != 0) {

  00286	85 d2		 test	 edx, edx
  00288	74 0e		 je	 SHORT $LN13@inflate_ta

; 244  :             huff &= incr - 1;

  0028a	8d 42 ff	 lea	 eax, DWORD PTR [edx-1]
  0028d	23 c1		 and	 eax, ecx

; 245  :             huff += incr;

  0028f	03 c2		 add	 eax, edx
  00291	8b f0		 mov	 esi, eax
  00293	89 45 f4	 mov	 DWORD PTR _huff$1$[ebp], eax

; 246  :         }
; 247  :         else

  00296	eb 05		 jmp	 SHORT $LN12@inflate_ta
$LN13@inflate_ta:

; 248  :             huff = 0;

  00298	33 f6		 xor	 esi, esi
  0029a	89 75 f4	 mov	 DWORD PTR _huff$1$[ebp], esi
$LN12@inflate_ta:

; 249  : 
; 250  :         /* go to next symbol, update count, len */
; 251  :         sym++;

  0029d	8b 45 14	 mov	 eax, DWORD PTR _work$[ebp]

; 252  :         if (--(count[len]) == 0) {

  002a0	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  002a5	83 c0 02	 add	 eax, 2
  002a8	66 01 4c 5d a0	 add	 WORD PTR _count$[ebp+ebx*2], cx
  002ad	89 45 14	 mov	 DWORD PTR _work$[ebp], eax
  002b0	75 15		 jne	 SHORT $LN11@inflate_ta

; 253  :             if (len == max) break;

  002b2	3b df		 cmp	 ebx, edi
  002b4	0f 84 d2 00 00
	00		 je	 $LN81@inflate_ta

; 254  :             len = lens[work[sym]];

  002ba	0f b7 00	 movzx	 eax, WORD PTR [eax]
  002bd	8b 4d d8	 mov	 ecx, DWORD PTR _lens$1$[ebp]
  002c0	0f b7 1c 41	 movzx	 ebx, WORD PTR [ecx+eax*2]
  002c4	89 5d ec	 mov	 DWORD PTR _len$2$[ebp], ebx
$LN11@inflate_ta:

; 255  :         }
; 256  : 
; 257  :         /* create new sub-table if needed */
; 258  :         if (len > root && (huff & mask) != low) {

  002c7	8b 4d e8	 mov	 ecx, DWORD PTR _root$3$[ebp]
  002ca	8b 55 fc	 mov	 edx, DWORD PTR _drop$1$[ebp]
  002cd	3b d9		 cmp	 ebx, ecx
  002cf	0f 86 13 ff ff
	ff		 jbe	 $LL131@inflate_ta
  002d5	8b 45 c4	 mov	 eax, DWORD PTR _mask$1$[ebp]
  002d8	23 c6		 and	 eax, esi
  002da	8b 75 14	 mov	 esi, DWORD PTR _work$[ebp]
  002dd	89 45 c8	 mov	 DWORD PTR tv1257[ebp], eax
  002e0	3b 45 cc	 cmp	 eax, DWORD PTR _low$1$[ebp]
  002e3	0f 84 07 ff ff
	ff		 je	 $LL24@inflate_ta

; 259  :             /* if first time, transition to sub-tables */
; 260  :             if (drop == 0)
; 261  :                 drop = root;
; 262  : 
; 263  :             /* increment past last table */
; 264  :             next += min;            /* here min is 1 << curr */

  002e9	8b 45 c0	 mov	 eax, DWORD PTR _min$2$[ebp]
  002ec	85 d2		 test	 edx, edx
  002ee	0f 44 d1	 cmove	 edx, ecx
  002f1	8b 4d f8	 mov	 ecx, DWORD PTR _next$1$[ebp]

; 265  : 
; 266  :             /* determine length of next table */
; 267  :             curr = len - drop;

  002f4	2b da		 sub	 ebx, edx
  002f6	89 55 fc	 mov	 DWORD PTR _drop$1$[ebp], edx

; 268  :             left = (int)(1 << curr);
; 269  :             while (curr + drop < max) {

  002f9	03 d3		 add	 edx, ebx
  002fb	8d 0c 81	 lea	 ecx, DWORD PTR [ecx+eax*4]
  002fe	b8 01 00 00 00	 mov	 eax, 1
  00303	89 4d f8	 mov	 DWORD PTR _next$1$[ebp], ecx
  00306	8b cb		 mov	 ecx, ebx
  00308	d3 e0		 shl	 eax, cl
  0030a	3b d7		 cmp	 edx, edi
  0030c	73 1a		 jae	 SHORT $LN130@inflate_ta

; 259  :             /* if first time, transition to sub-tables */
; 260  :             if (drop == 0)
; 261  :                 drop = root;
; 262  : 
; 263  :             /* increment past last table */
; 264  :             next += min;            /* here min is 1 << curr */

  0030e	8d 75 a0	 lea	 esi, DWORD PTR _count$[ebp]
  00311	8d 34 56	 lea	 esi, DWORD PTR [esi+edx*2]
$LL7@inflate_ta:

; 270  :                 left -= count[curr + drop];

  00314	0f b7 0e	 movzx	 ecx, WORD PTR [esi]
  00317	2b c1		 sub	 eax, ecx

; 271  :                 if (left <= 0) break;

  00319	85 c0		 test	 eax, eax
  0031b	7e 0b		 jle	 SHORT $LN130@inflate_ta

; 272  :                 curr++;

  0031d	42		 inc	 edx
  0031e	43		 inc	 ebx
  0031f	83 c6 02	 add	 esi, 2

; 273  :                 left <<= 1;

  00322	03 c0		 add	 eax, eax
  00324	3b d7		 cmp	 edx, edi
  00326	72 ec		 jb	 SHORT $LL7@inflate_ta
$LN130@inflate_ta:

; 274  :             }
; 275  : 
; 276  :             /* check for enough space */
; 277  :             used += 1U << curr;

  00328	8b 45 d4	 mov	 eax, DWORD PTR _used$1$[ebp]
  0032b	8b cb		 mov	 ecx, ebx
  0032d	be 01 00 00 00	 mov	 esi, 1
  00332	d3 e6		 shl	 esi, cl

; 278  :             if ((type == LENS && used > ENOUGH_LENS) ||
; 279  :                 (type == DISTS && used > ENOUGH_DISTS))

  00334	8b 4d f0	 mov	 ecx, DWORD PTR _type$1$[ebp]
  00337	03 c6		 add	 eax, esi
  00339	89 75 d0	 mov	 DWORD PTR tv1258[ebp], esi
  0033c	89 45 d4	 mov	 DWORD PTR _used$1$[ebp], eax
  0033f	83 f9 01	 cmp	 ecx, 1
  00342	75 07		 jne	 SHORT $LN2@inflate_ta
  00344	3d 54 03 00 00	 cmp	 eax, 852		; 00000354H
  00349	eb 0a		 jmp	 SHORT $LN138@inflate_ta
$LN2@inflate_ta:
  0034b	83 f9 02	 cmp	 ecx, 2
  0034e	75 0b		 jne	 SHORT $LN4@inflate_ta
  00350	3d 50 02 00 00	 cmp	 eax, 592		; 00000250H
$LN138@inflate_ta:
  00355	0f 87 81 fe ff
	ff		 ja	 $LN26@inflate_ta
$LN4@inflate_ta:

; 280  :                 return 1;
; 281  : 
; 282  :             /* point entry in root table to sub-table */
; 283  :             low = huff & mask;
; 284  :             (*table)[low].op = (unsigned char)curr;

  0035b	8b 75 0c	 mov	 esi, DWORD PTR _table$[ebp]
  0035e	8b 55 c8	 mov	 edx, DWORD PTR tv1257[ebp]

; 285  :             (*table)[low].bits = (unsigned char)root;

  00361	8b 4d e8	 mov	 ecx, DWORD PTR _root$3$[ebp]
  00364	89 55 cc	 mov	 DWORD PTR _low$1$[ebp], edx
  00367	8b 06		 mov	 eax, DWORD PTR [esi]
  00369	88 1c 90	 mov	 BYTE PTR [eax+edx*4], bl
  0036c	8b 06		 mov	 eax, DWORD PTR [esi]

; 286  :             (*table)[low].val = (unsigned short)(next - *table);
; 287  :         }
; 288  :     }

  0036e	8b 5d ec	 mov	 ebx, DWORD PTR _len$2$[ebp]
  00371	88 4c 90 01	 mov	 BYTE PTR [eax+edx*4+1], cl
  00375	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00377	8b 45 f8	 mov	 eax, DWORD PTR _next$1$[ebp]
  0037a	2b c1		 sub	 eax, ecx
  0037c	c1 f8 02	 sar	 eax, 2
  0037f	66 89 44 91 02	 mov	 WORD PTR [ecx+edx*4+2], ax
  00384	8b 55 fc	 mov	 edx, DWORD PTR _drop$1$[ebp]
  00387	e9 5c fe ff ff	 jmp	 $LL131@inflate_ta
$LN81@inflate_ta:

; 289  : 
; 290  :     /* fill in remaining table entry if code is incomplete (guaranteed to have
; 291  :        at most one remaining entry, since if the code is incomplete, the
; 292  :        maximum code length that was allowed to get this far is one bit) */
; 293  :     if (huff != 0) {

  0038c	85 f6		 test	 esi, esi
  0038e	74 19		 je	 SHORT $LN1@inflate_ta

; 294  :         here.op = (unsigned char)64;            /* invalid code marker */
; 295  :         here.bits = (unsigned char)(len - drop);

  00390	2a 5d fc	 sub	 bl, BYTE PTR _drop$1$[ebp]

; 296  :         here.val = (unsigned short)0;

  00393	33 c0		 xor	 eax, eax

; 297  :         next[huff] = here;

  00395	8b 4d f8	 mov	 ecx, DWORD PTR _next$1$[ebp]
  00398	c6 45 08 40	 mov	 BYTE PTR _here$[ebp], 64 ; 00000040H
  0039c	88 5d 09	 mov	 BYTE PTR _here$[ebp+1], bl
  0039f	66 89 45 0a	 mov	 WORD PTR _here$[ebp+2], ax
  003a3	8b 45 08	 mov	 eax, DWORD PTR _here$[ebp]
  003a6	89 04 b1	 mov	 DWORD PTR [ecx+esi*4], eax
$LN1@inflate_ta:

; 298  :     }
; 299  : 
; 300  :     /* set return parameters */
; 301  :     *table += used;

  003a9	8b 4d 0c	 mov	 ecx, DWORD PTR _table$[ebp]
  003ac	8b 45 d4	 mov	 eax, DWORD PTR _used$1$[ebp]
  003af	c1 e0 02	 shl	 eax, 2
  003b2	5f		 pop	 edi
  003b3	01 01		 add	 DWORD PTR [ecx], eax

; 302  :     *bits = root;

  003b5	8b 4d 10	 mov	 ecx, DWORD PTR _bits$[ebp]
  003b8	8b 45 e8	 mov	 eax, DWORD PTR _root$3$[ebp]
  003bb	5e		 pop	 esi
  003bc	5b		 pop	 ebx
  003bd	89 01		 mov	 DWORD PTR [ecx], eax

; 303  :     return 0;

  003bf	33 c0		 xor	 eax, eax

; 304  : }

  003c1	8b e5		 mov	 esp, ebp
  003c3	5d		 pop	 ebp
  003c4	c3		 ret	 0
$LN79@inflate_ta:
  003c5	5f		 pop	 edi
  003c6	5e		 pop	 esi

; 135  :         if (left < 0) return -1;        /* over-subscribed */

  003c7	83 c8 ff	 or	 eax, -1
  003ca	5b		 pop	 ebx

; 304  : }

  003cb	8b e5		 mov	 esp, ebp
  003cd	5d		 pop	 ebp
  003ce	c3		 ret	 0
_inflate_table ENDP
_TEXT	ENDS
END
