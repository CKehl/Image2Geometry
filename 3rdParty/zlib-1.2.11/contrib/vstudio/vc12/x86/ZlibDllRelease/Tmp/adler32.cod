; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.40629.0 

	TITLE	D:\git\Image2Geometry\3rdParty\zlib-1.2.11\adler32.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	_adler32_combine@12
PUBLIC	_adler32@12
PUBLIC	_adler32_z@12
EXTRN	__alldiv:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
; Function compile flags: /Ogtp
; File d:\git\image2geometry\3rdparty\zlib-1.2.11\adler32.c
;	COMDAT _adler32_z@12
_TEXT	SEGMENT
_adler$ = 8						; size = 4
tv1579 = 12						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_adler32_z@12 PROC					; COMDAT

; 67   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 68   :     unsigned long sum2;
; 69   :     unsigned n;
; 70   : 
; 71   :     /* split Adler-32 into component sums */
; 72   :     sum2 = (adler >> 16) & 0xffff;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _adler$[ebp]
  00006	53		 push	 ebx

; 73   :     adler &= 0xffff;
; 74   : 
; 75   :     /* in case user likes doing a byte at a time, keep it fast */
; 76   :     if (len == 1) {

  00007	8b 5d 10	 mov	 ebx, DWORD PTR _len$[ebp]
  0000a	56		 push	 esi
  0000b	8b f1		 mov	 esi, ecx
  0000d	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00013	c1 ee 10	 shr	 esi, 16			; 00000010H
  00016	83 fb 01	 cmp	 ebx, 1
  00019	75 33		 jne	 SHORT $LN18@adler32_z

; 77   :         adler += buf[0];

  0001b	8b 45 0c	 mov	 eax, DWORD PTR _buf$[ebp]
  0001e	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00021	03 c8		 add	 ecx, eax

; 78   :         if (adler >= BASE)

  00023	81 f9 f1 ff 00
	00		 cmp	 ecx, 65521		; 0000fff1H
  00029	72 06		 jb	 SHORT $LN17@adler32_z

; 79   :             adler -= BASE;

  0002b	81 e9 f1 ff 00
	00		 sub	 ecx, 65521		; 0000fff1H
$LN17@adler32_z:

; 80   :         sum2 += adler;

  00031	03 f1		 add	 esi, ecx

; 81   :         if (sum2 >= BASE)

  00033	81 fe f1 ff 00
	00		 cmp	 esi, 65521		; 0000fff1H
  00039	72 06		 jb	 SHORT $LN16@adler32_z

; 82   :             sum2 -= BASE;

  0003b	81 ee f1 ff 00
	00		 sub	 esi, 65521		; 0000fff1H
$LN16@adler32_z:

; 83   :         return adler | (sum2 << 16);

  00041	c1 e6 10	 shl	 esi, 16			; 00000010H
  00044	0b f1		 or	 esi, ecx
  00046	8b c6		 mov	 eax, esi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx

; 131  : }

  0004a	5d		 pop	 ebp
  0004b	c2 0c 00	 ret	 12			; 0000000cH
$LN18@adler32_z:
  0004e	57		 push	 edi

; 84   :     }
; 85   : 
; 86   :     /* initial Adler-32 value (deferred check for len == 1 speed) */
; 87   :     if (buf == Z_NULL)

  0004f	8b 7d 0c	 mov	 edi, DWORD PTR _buf$[ebp]
  00052	85 ff		 test	 edi, edi
  00054	75 0a		 jne	 SHORT $LN15@adler32_z

; 88   :         return 1L;

  00056	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx

; 131  : }

  0005c	5d		 pop	 ebp
  0005d	c2 0c 00	 ret	 12			; 0000000cH
$LN15@adler32_z:

; 89   : 
; 90   :     /* in case short lengths are provided, keep it somewhat fast */
; 91   :     if (len < 16) {

  00060	83 fb 10	 cmp	 ebx, 16			; 00000010H
  00063	73 45		 jae	 SHORT $LN22@adler32_z

; 92   :         while (len--) {

  00065	85 db		 test	 ebx, ebx
  00067	74 14		 je	 SHORT $LN26@adler32_z
  00069	8d a4 24 00 00
	00 00		 npad	 7
$LL13@adler32_z:

; 93   :             adler += *buf++;

  00070	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00073	8d 7f 01	 lea	 edi, DWORD PTR [edi+1]
  00076	03 c8		 add	 ecx, eax

; 94   :             sum2 += adler;

  00078	03 f1		 add	 esi, ecx
  0007a	4b		 dec	 ebx
  0007b	75 f3		 jne	 SHORT $LL13@adler32_z
$LN26@adler32_z:

; 95   :         }
; 96   :         if (adler >= BASE)

  0007d	81 f9 f1 ff 00
	00		 cmp	 ecx, 65521		; 0000fff1H
  00083	72 06		 jb	 SHORT $LN11@adler32_z

; 97   :             adler -= BASE;

  00085	81 e9 f1 ff 00
	00		 sub	 ecx, 65521		; 0000fff1H
$LN11@adler32_z:

; 98   :         MOD28(sum2);            /* only added so many BASE's */

  0008b	b8 71 80 07 80	 mov	 eax, -2146992015	; 80078071H
  00090	f7 e6		 mul	 esi
  00092	5f		 pop	 edi
  00093	c1 ea 0f	 shr	 edx, 15			; 0000000fH

; 99   :         return adler | (sum2 << 16);

  00096	8b c2		 mov	 eax, edx
  00098	c1 e0 04	 shl	 eax, 4
  0009b	2b c2		 sub	 eax, edx
  0009d	03 c6		 add	 eax, esi
  0009f	c1 e0 10	 shl	 eax, 16			; 00000010H
  000a2	5e		 pop	 esi
  000a3	0b c1		 or	 eax, ecx
  000a5	5b		 pop	 ebx

; 131  : }

  000a6	5d		 pop	 ebp
  000a7	c2 0c 00	 ret	 12			; 0000000cH
$LN22@adler32_z:

; 100  :     }
; 101  : 
; 102  :     /* do length NMAX blocks -- requires just one modulo operation */
; 103  :     while (len >= NMAX) {

  000aa	81 fb b0 15 00
	00		 cmp	 ebx, 5552		; 000015b0H
  000b0	0f 82 e0 00 00
	00		 jb	 $LN9@adler32_z
  000b6	b8 af a9 6e 5e	 mov	 eax, 1584310703		; 5e6ea9afH
  000bb	f7 e3		 mul	 ebx
  000bd	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  000c0	89 55 0c	 mov	 DWORD PTR tv1579[ebp], edx
  000c3	eb 0b 8d a4 24
	00 00 00 00 8d
	64 24 00	 npad	 13
$LL10@adler32_z:

; 104  :         len -= NMAX;

  000d0	81 eb b0 15 00
	00		 sub	 ebx, 5552		; 000015b0H

; 105  :         n = NMAX / 16;          /* NMAX is divisible by 16 */

  000d6	ba 5b 01 00 00	 mov	 edx, 347		; 0000015bH
  000db	eb 03 8d 49 00	 npad	 5
$LL8@adler32_z:

; 106  :         do {
; 107  :             DO16(buf);          /* 16 sums unrolled */

  000e0	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  000e3	03 c8		 add	 ecx, eax
  000e5	0f b6 47 01	 movzx	 eax, BYTE PTR [edi+1]
  000e9	03 f1		 add	 esi, ecx
  000eb	03 c8		 add	 ecx, eax
  000ed	0f b6 47 02	 movzx	 eax, BYTE PTR [edi+2]
  000f1	03 f1		 add	 esi, ecx
  000f3	03 c8		 add	 ecx, eax
  000f5	0f b6 47 03	 movzx	 eax, BYTE PTR [edi+3]
  000f9	03 f1		 add	 esi, ecx
  000fb	03 c8		 add	 ecx, eax
  000fd	0f b6 47 04	 movzx	 eax, BYTE PTR [edi+4]
  00101	03 f1		 add	 esi, ecx
  00103	03 c8		 add	 ecx, eax
  00105	0f b6 47 05	 movzx	 eax, BYTE PTR [edi+5]
  00109	03 f1		 add	 esi, ecx
  0010b	03 c8		 add	 ecx, eax
  0010d	0f b6 47 06	 movzx	 eax, BYTE PTR [edi+6]
  00111	03 f1		 add	 esi, ecx
  00113	03 c8		 add	 ecx, eax
  00115	0f b6 47 07	 movzx	 eax, BYTE PTR [edi+7]
  00119	03 f1		 add	 esi, ecx
  0011b	03 c8		 add	 ecx, eax
  0011d	0f b6 47 08	 movzx	 eax, BYTE PTR [edi+8]
  00121	03 f1		 add	 esi, ecx
  00123	03 c8		 add	 ecx, eax
  00125	0f b6 47 09	 movzx	 eax, BYTE PTR [edi+9]
  00129	03 f1		 add	 esi, ecx
  0012b	03 c8		 add	 ecx, eax
  0012d	0f b6 47 0a	 movzx	 eax, BYTE PTR [edi+10]
  00131	03 f1		 add	 esi, ecx
  00133	03 c8		 add	 ecx, eax
  00135	0f b6 47 0b	 movzx	 eax, BYTE PTR [edi+11]
  00139	03 f1		 add	 esi, ecx
  0013b	03 c8		 add	 ecx, eax
  0013d	0f b6 47 0c	 movzx	 eax, BYTE PTR [edi+12]
  00141	03 f1		 add	 esi, ecx
  00143	03 c8		 add	 ecx, eax
  00145	0f b6 47 0d	 movzx	 eax, BYTE PTR [edi+13]
  00149	03 f1		 add	 esi, ecx
  0014b	03 c8		 add	 ecx, eax
  0014d	0f b6 47 0e	 movzx	 eax, BYTE PTR [edi+14]
  00151	03 f1		 add	 esi, ecx
  00153	03 c8		 add	 ecx, eax
  00155	0f b6 47 0f	 movzx	 eax, BYTE PTR [edi+15]
  00159	03 f1		 add	 esi, ecx

; 108  :             buf += 16;

  0015b	83 c7 10	 add	 edi, 16			; 00000010H
  0015e	03 c8		 add	 ecx, eax
  00160	03 f1		 add	 esi, ecx

; 109  :         } while (--n);

  00162	4a		 dec	 edx
  00163	0f 85 77 ff ff
	ff		 jne	 $LL8@adler32_z

; 110  :         MOD(adler);

  00169	b8 71 80 07 80	 mov	 eax, -2146992015	; 80078071H
  0016e	f7 e1		 mul	 ecx
  00170	c1 ea 0f	 shr	 edx, 15			; 0000000fH
  00173	69 c2 0f 00 ff
	ff		 imul	 eax, edx, -65521
  00179	03 c8		 add	 ecx, eax

; 111  :         MOD(sum2);

  0017b	b8 71 80 07 80	 mov	 eax, -2146992015	; 80078071H
  00180	f7 e6		 mul	 esi
  00182	c1 ea 0f	 shr	 edx, 15			; 0000000fH
  00185	69 c2 0f 00 ff
	ff		 imul	 eax, edx, -65521
  0018b	03 f0		 add	 esi, eax
  0018d	ff 4d 0c	 dec	 DWORD PTR tv1579[ebp]
  00190	0f 85 3a ff ff
	ff		 jne	 $LL10@adler32_z
$LN9@adler32_z:

; 112  :     }
; 113  : 
; 114  :     /* do remaining bytes (less than NMAX, still just one modulo) */
; 115  :     if (len) {                  /* avoid modulos if none remaining */

  00196	85 db		 test	 ebx, ebx
  00198	0f 84 d3 00 00
	00		 je	 $LN5@adler32_z

; 116  :         while (len >= 16) {

  0019e	83 fb 10	 cmp	 ebx, 16			; 00000010H
  001a1	0f 82 95 00 00
	00		 jb	 $LN25@adler32_z
  001a7	8b d3		 mov	 edx, ebx
  001a9	c1 ea 04	 shr	 edx, 4
  001ac	8d 64 24 00	 npad	 4
$LL4@adler32_z:

; 117  :             len -= 16;
; 118  :             DO16(buf);

  001b0	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  001b3	83 eb 10	 sub	 ebx, 16			; 00000010H
  001b6	03 c8		 add	 ecx, eax
  001b8	0f b6 47 01	 movzx	 eax, BYTE PTR [edi+1]
  001bc	03 f1		 add	 esi, ecx
  001be	03 c8		 add	 ecx, eax
  001c0	0f b6 47 02	 movzx	 eax, BYTE PTR [edi+2]
  001c4	03 f1		 add	 esi, ecx
  001c6	03 c8		 add	 ecx, eax
  001c8	0f b6 47 03	 movzx	 eax, BYTE PTR [edi+3]
  001cc	03 f1		 add	 esi, ecx
  001ce	03 c8		 add	 ecx, eax
  001d0	0f b6 47 04	 movzx	 eax, BYTE PTR [edi+4]
  001d4	03 f1		 add	 esi, ecx
  001d6	03 c8		 add	 ecx, eax
  001d8	0f b6 47 05	 movzx	 eax, BYTE PTR [edi+5]
  001dc	03 f1		 add	 esi, ecx
  001de	03 c8		 add	 ecx, eax
  001e0	0f b6 47 06	 movzx	 eax, BYTE PTR [edi+6]
  001e4	03 f1		 add	 esi, ecx
  001e6	03 c8		 add	 ecx, eax
  001e8	0f b6 47 07	 movzx	 eax, BYTE PTR [edi+7]
  001ec	03 f1		 add	 esi, ecx
  001ee	03 c8		 add	 ecx, eax
  001f0	0f b6 47 08	 movzx	 eax, BYTE PTR [edi+8]
  001f4	03 f1		 add	 esi, ecx
  001f6	03 c8		 add	 ecx, eax
  001f8	0f b6 47 09	 movzx	 eax, BYTE PTR [edi+9]
  001fc	03 f1		 add	 esi, ecx
  001fe	03 c8		 add	 ecx, eax
  00200	0f b6 47 0a	 movzx	 eax, BYTE PTR [edi+10]
  00204	03 f1		 add	 esi, ecx
  00206	03 c8		 add	 ecx, eax
  00208	0f b6 47 0b	 movzx	 eax, BYTE PTR [edi+11]
  0020c	03 f1		 add	 esi, ecx
  0020e	03 c8		 add	 ecx, eax
  00210	0f b6 47 0c	 movzx	 eax, BYTE PTR [edi+12]
  00214	03 f1		 add	 esi, ecx
  00216	03 c8		 add	 ecx, eax
  00218	0f b6 47 0d	 movzx	 eax, BYTE PTR [edi+13]
  0021c	03 f1		 add	 esi, ecx
  0021e	03 c8		 add	 ecx, eax
  00220	0f b6 47 0e	 movzx	 eax, BYTE PTR [edi+14]
  00224	03 f1		 add	 esi, ecx
  00226	03 c8		 add	 ecx, eax
  00228	0f b6 47 0f	 movzx	 eax, BYTE PTR [edi+15]
  0022c	03 f1		 add	 esi, ecx

; 119  :             buf += 16;

  0022e	83 c7 10	 add	 edi, 16			; 00000010H
  00231	03 c8		 add	 ecx, eax
  00233	03 f1		 add	 esi, ecx
  00235	4a		 dec	 edx
  00236	0f 85 74 ff ff
	ff		 jne	 $LL4@adler32_z
$LN25@adler32_z:

; 120  :         }
; 121  :         while (len--) {

  0023c	85 db		 test	 ebx, ebx
  0023e	74 0d		 je	 SHORT $LN30@adler32_z
$LL2@adler32_z:

; 122  :             adler += *buf++;

  00240	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00243	8d 7f 01	 lea	 edi, DWORD PTR [edi+1]
  00246	03 c8		 add	 ecx, eax

; 123  :             sum2 += adler;

  00248	03 f1		 add	 esi, ecx
  0024a	4b		 dec	 ebx
  0024b	75 f3		 jne	 SHORT $LL2@adler32_z
$LN30@adler32_z:

; 124  :         }
; 125  :         MOD(adler);

  0024d	b8 71 80 07 80	 mov	 eax, -2146992015	; 80078071H
  00252	f7 e1		 mul	 ecx

; 126  :         MOD(sum2);

  00254	b8 71 80 07 80	 mov	 eax, -2146992015	; 80078071H
  00259	c1 ea 0f	 shr	 edx, 15			; 0000000fH
  0025c	69 d2 0f 00 ff
	ff		 imul	 edx, edx, -65521
  00262	03 ca		 add	 ecx, edx
  00264	f7 e6		 mul	 esi
  00266	c1 ea 0f	 shr	 edx, 15			; 0000000fH
  00269	69 c2 0f 00 ff
	ff		 imul	 eax, edx, -65521
  0026f	03 f0		 add	 esi, eax
$LN5@adler32_z:

; 127  :     }
; 128  : 
; 129  :     /* return recombined sums */
; 130  :     return adler | (sum2 << 16);

  00271	c1 e6 10	 shl	 esi, 16			; 00000010H
  00274	0b f1		 or	 esi, ecx
  00276	5f		 pop	 edi
  00277	8b c6		 mov	 eax, esi
  00279	5e		 pop	 esi
  0027a	5b		 pop	 ebx

; 131  : }

  0027b	5d		 pop	 ebp
  0027c	c2 0c 00	 ret	 12			; 0000000cH
_adler32_z@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\git\image2geometry\3rdparty\zlib-1.2.11\adler32.c
;	COMDAT _adler32@12
_TEXT	SEGMENT
_adler$ = 8						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_adler32@12 PROC					; COMDAT

; 138  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 140  : }

  00003	5d		 pop	 ebp

; 139  :     return adler32_z(adler, buf, len);

  00004	e9 00 00 00 00	 jmp	 _adler32_z@12
_adler32@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\git\image2geometry\3rdparty\zlib-1.2.11\adler32.c
;	COMDAT _adler32_combine_
_TEXT	SEGMENT
_adler2$1$ = -4						; size = 4
_len2$ = 8						; size = 8
_adler32_combine_ PROC					; COMDAT
; _adler1$ = ecx
; _adler2$ = edx

; 147  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 148  :     unsigned long sum1;
; 149  :     unsigned long sum2;
; 150  :     unsigned rem;
; 151  : 
; 152  :     /* for negative len, return invalid adler32 as a clue for debugging */
; 153  :     if (len2 < 0)

  00004	8b 45 0c	 mov	 eax, DWORD PTR _len2$[ebp+4]
  00007	89 55 fc	 mov	 DWORD PTR _adler2$1$[ebp], edx
  0000a	53		 push	 ebx
  0000b	8b d9		 mov	 ebx, ecx
  0000d	57		 push	 edi
  0000e	8b 7d 08	 mov	 edi, DWORD PTR _len2$[ebp]
  00011	85 c0		 test	 eax, eax
  00013	7f 0f		 jg	 SHORT $LN5@adler32_co
  00015	7c 04		 jl	 SHORT $LN8@adler32_co
  00017	85 ff		 test	 edi, edi
  00019	73 09		 jae	 SHORT $LN5@adler32_co
$LN8@adler32_co:
  0001b	5f		 pop	 edi

; 154  :         return 0xffffffffUL;

  0001c	83 c8 ff	 or	 eax, -1
  0001f	5b		 pop	 ebx

; 169  : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
$LN5@adler32_co:
  00024	56		 push	 esi

; 155  : 
; 156  :     /* the derivation of this formula is left as an exercise for the reader */
; 157  :     MOD63(len2);                /* assumes len2 >= 0 */

  00025	6a 00		 push	 0
  00027	68 f1 ff 00 00	 push	 65521			; 0000fff1H
  0002c	50		 push	 eax
  0002d	57		 push	 edi
  0002e	e8 00 00 00 00	 call	 __alldiv
  00033	69 c0 f1 ff 00
	00		 imul	 eax, eax, 65521

; 158  :     rem = (unsigned)len2;
; 159  :     sum1 = adler1 & 0xffff;

  00039	0f b7 cb	 movzx	 ecx, bx

; 160  :     sum2 = rem * sum1;

  0003c	8b f1		 mov	 esi, ecx

; 161  :     MOD(sum2);
; 162  :     sum1 += (adler2 & 0xffff) + BASE - 1;
; 163  :     sum2 += ((adler1 >> 16) & 0xffff) + ((adler2 >> 16) & 0xffff) + BASE - rem;

  0003e	c1 eb 10	 shr	 ebx, 16			; 00000010H
  00041	2b f8		 sub	 edi, eax
  00043	8b 45 fc	 mov	 eax, DWORD PTR _adler2$1$[ebp]
  00046	0f b7 c0	 movzx	 eax, ax
  00049	05 f0 ff 00 00	 add	 eax, 65520		; 0000fff0H
  0004e	0f af f7	 imul	 esi, edi
  00051	03 c8		 add	 ecx, eax
  00053	b8 71 80 07 80	 mov	 eax, -2146992015	; 80078071H
  00058	f7 e6		 mul	 esi
  0005a	81 c6 f1 ff 00
	00		 add	 esi, 65521		; 0000fff1H
  00060	c1 ea 0f	 shr	 edx, 15			; 0000000fH
  00063	69 c2 f1 ff 00
	00		 imul	 eax, edx, 65521
  00069	2b d8		 sub	 ebx, eax
  0006b	8b 45 fc	 mov	 eax, DWORD PTR _adler2$1$[ebp]
  0006e	c1 e8 10	 shr	 eax, 16			; 00000010H
  00071	03 c3		 add	 eax, ebx
  00073	2b c7		 sub	 eax, edi
  00075	03 c6		 add	 eax, esi
  00077	5e		 pop	 esi

; 164  :     if (sum1 >= BASE) sum1 -= BASE;

  00078	81 f9 f1 ff 00
	00		 cmp	 ecx, 65521		; 0000fff1H
  0007e	72 14		 jb	 SHORT $LN3@adler32_co
  00080	81 e9 f1 ff 00
	00		 sub	 ecx, 65521		; 0000fff1H

; 165  :     if (sum1 >= BASE) sum1 -= BASE;

  00086	81 f9 f1 ff 00
	00		 cmp	 ecx, 65521		; 0000fff1H
  0008c	72 06		 jb	 SHORT $LN3@adler32_co
  0008e	81 e9 f1 ff 00
	00		 sub	 ecx, 65521		; 0000fff1H
$LN3@adler32_co:

; 166  :     if (sum2 >= ((unsigned long)BASE << 1)) sum2 -= ((unsigned long)BASE << 1);

  00094	3d e2 ff 01 00	 cmp	 eax, 131042		; 0001ffe2H
  00099	72 05		 jb	 SHORT $LN2@adler32_co
  0009b	2d e2 ff 01 00	 sub	 eax, 131042		; 0001ffe2H
$LN2@adler32_co:

; 167  :     if (sum2 >= BASE) sum2 -= BASE;

  000a0	3d f1 ff 00 00	 cmp	 eax, 65521		; 0000fff1H
  000a5	72 05		 jb	 SHORT $LN1@adler32_co
  000a7	2d f1 ff 00 00	 sub	 eax, 65521		; 0000fff1H
$LN1@adler32_co:

; 168  :     return sum1 | (sum2 << 16);

  000ac	c1 e0 10	 shl	 eax, 16			; 00000010H
  000af	5f		 pop	 edi
  000b0	0b c1		 or	 eax, ecx
  000b2	5b		 pop	 ebx

; 169  : }

  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c3		 ret	 0
_adler32_combine_ ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File d:\git\image2geometry\3rdparty\zlib-1.2.11\adler32.c
;	COMDAT _adler32_combine@12
_TEXT	SEGMENT
_adler1$ = 8						; size = 4
_adler2$ = 12						; size = 4
_len2$ = 16						; size = 4
_adler32_combine@12 PROC				; COMDAT

; 176  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 177  :     return adler32_combine_(adler1, adler2, len2);

  00003	8b 45 10	 mov	 eax, DWORD PTR _len2$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _adler1$[ebp]
  00009	99		 cdq
  0000a	52		 push	 edx
  0000b	8b 55 0c	 mov	 edx, DWORD PTR _adler2$[ebp]
  0000e	50		 push	 eax
  0000f	e8 00 00 00 00	 call	 _adler32_combine_
  00014	83 c4 08	 add	 esp, 8

; 178  : }

  00017	5d		 pop	 ebp
  00018	c2 0c 00	 ret	 12			; 0000000cH
_adler32_combine@12 ENDP
_TEXT	ENDS
END
